{"file_contents":{"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline text-left [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":2001},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\";\nimport { twMerge } from \"tailwind-merge\";\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nconst getLocalStorage = (key: string): any =>\n  JSON.parse(window.localStorage.getItem(key) || \"null\");\nconst setLocalStorage = (key: string, value: any): void =>\n  window.localStorage.setItem(key, JSON.stringify(value));\n\nexport { getLocalStorage, setLocalStorage };\n","size_bytes":438},"replit.md":{"content":"# Overview\n\nEcoRunner is a 3D recycling education game built with React and Three.js. The game challenges players to run through city streets while correctly classifying waste items into appropriate recycling bins. Players must navigate between lanes, jump to interact with bins, and avoid obstacles while learning about proper waste sorting practices.\n\nThe application follows a full-stack architecture with an Express.js backend, React frontend using Three.js for 3D rendering, and PostgreSQL database integration through Drizzle ORM. The game features an infinite runner mechanic with procedurally generated environments, tutorial system, and progressive difficulty scaling.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript for type safety and modern React features\n- **3D Rendering**: Three.js via React Three Fiber for WebGL-based 3D graphics and game mechanics\n- **UI Components**: Radix UI primitives with Tailwind CSS for consistent, accessible design system\n- **State Management**: Zustand for lightweight, centralized game state management\n- **Asset Loading**: React Three Drei for texture loading, controls, and 3D utilities\n- **Build System**: Vite for fast development and optimized production builds\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js web server\n- **Language**: TypeScript with ESM modules for modern JavaScript features\n- **Development**: Hot module replacement via Vite middleware in development mode\n- **Production**: Compiled JavaScript with esbuild for optimized server bundle\n\n## Data Storage\n- **Database**: PostgreSQL via Neon serverless database\n- **ORM**: Drizzle ORM with type-safe schema definitions and migrations\n- **Schema**: User management system with username/password authentication structure\n- **Storage Interface**: Abstracted storage layer with in-memory fallback for development\n\n## Game Engine Architecture\n- **Rendering**: Canvas-based WebGL rendering with shadow mapping and lighting\n- **Physics**: Custom collision detection for lane-based movement system  \n- **Procedural Generation**: Seeded random generation for consistent infinite environments\n- **Audio**: HTML5 Audio API with sound effects and background music management\n- **Input**: Keyboard controls via React Three Drei KeyboardControls\n\n## State Management Pattern\n- **Game State**: Centralized Zustand store managing game logic, player position, scoring, and tutorial progression\n- **Audio State**: Separate store for sound management with mute/unmute functionality\n- **Component State**: Local React state for UI-specific interactions and form handling\n\n## Asset Pipeline\n- **3D Models**: Support for GLTF/GLB model loading\n- **Textures**: PNG texture loading with Three.js TextureLoader\n- **Audio**: MP3/OGG/WAV audio file support\n- **Fonts**: Web fonts via Fontsource with custom font loading\n\n# External Dependencies\n\n## Database Services\n- **Neon Database**: Serverless PostgreSQL database hosting\n- **Connection**: Environment-based DATABASE_URL configuration\n\n## Development Tools\n- **Drizzle Kit**: Database schema management and migration system\n- **Vite Plugin**: Runtime error overlay for enhanced development experience\n- **GLSL Plugin**: Shader support for advanced 3D effects\n\n## UI/UX Libraries  \n- **Radix UI**: Complete component library for accessible UI primitives\n- **Tailwind CSS**: Utility-first CSS framework with custom design system\n- **Lucide React**: Icon library for consistent iconography\n- **Class Variance Authority**: Type-safe CSS class composition\n\n## 3D Graphics Stack\n- **Three.js**: Core 3D graphics library and WebGL wrapper\n- **React Three Fiber**: React renderer for Three.js declarative 3D scenes\n- **React Three Drei**: Helper library for common Three.js patterns and utilities\n- **React Three Post-processing**: Post-processing effects pipeline\n\n## Build and Development\n- **TypeScript**: Static type checking and enhanced developer experience\n- **esbuild**: Fast JavaScript bundler for production server builds\n- **PostCSS**: CSS processing with Tailwind and Autoprefixer plugins\n- **Replit Integration**: Runtime error modal plugin for cloud development","size_bytes":4252},"client/src/data/wasteItems.ts":{"content":"import { TrashType } from \"../types/game\";\n\nexport interface WasteItem {\n  id: number;\n  name: string;\n  correctContainer: TrashType;\n  description?: string;\n}\n\nexport const WASTE_ITEMS: WasteItem[] = [\n  // PLÁSTICO (38 items)\n  { id: 1, name: \"Botella de agua\", correctContainer: \"plastic\" },\n  { id: 2, name: \"Envase de yogur\", correctContainer: \"plastic\" },\n  { id: 3, name: \"Bolsa de supermercado\", correctContainer: \"plastic\" },\n  { id: 4, name: \"Botella de refresco\", correctContainer: \"plastic\" },\n  { id: 5, name: \"Envase de champú\", correctContainer: \"plastic\" },\n  { id: 6, name: \"Tapón de botella\", correctContainer: \"plastic\" },\n  { id: 7, name: \"Envase de detergente\", correctContainer: \"plastic\" },\n  { id: 8, name: \"Bolsa de pan\", correctContainer: \"plastic\" },\n  { id: 9, name: \"Botella de aceite vacía\", correctContainer: \"plastic\" },\n  { id: 10, name: \"Vaso de plástico\", correctContainer: \"plastic\" },\n  { id: 11, name: \"Plato desechable\", correctContainer: \"plastic\" },\n  { id: 12, name: \"Cubiertos de plástico\", correctContainer: \"plastic\" },\n  { id: 13, name: \"Envase de margarina\", correctContainer: \"plastic\" },\n  { id: 14, name: \"Botella de suavizante\", correctContainer: \"plastic\" },\n  { id: 15, name: \"Envase de crema\", correctContainer: \"plastic\" },\n  { id: 16, name: \"Bolsa de congelados\", correctContainer: \"plastic\" },\n  { id: 17, name: \"Envase de helado\", correctContainer: \"plastic\" },\n  { id: 18, name: \"Botella de lejía vacía\", correctContainer: \"plastic\" },\n  { id: 19, name: \"Envase de pasta de dientes\", correctContainer: \"plastic\" },\n  { id: 20, name: \"Bolsa de basura\", correctContainer: \"plastic\" },\n  { id: 21, name: \"Envase de queso fresco\", correctContainer: \"plastic\" },\n  { id: 22, name: \"Botella de gel\", correctContainer: \"plastic\" },\n  { id: 23, name: \"Envase de mantequilla\", correctContainer: \"plastic\" },\n  { id: 24, name: \"Bolsa de cereales\", correctContainer: \"plastic\" },\n  { id: 25, name: \"Envase de miel\", correctContainer: \"plastic\" },\n  { id: 26, name: \"Botella de vinagre\", correctContainer: \"plastic\" },\n  { id: 27, name: \"Envase de salsa\", correctContainer: \"plastic\" },\n  { id: 28, name: \"Bolsa de verduras\", correctContainer: \"plastic\" },\n  { id: 29, name: \"Envase de mermelada plástico\", correctContainer: \"plastic\" },\n  { id: 30, name: \"Botella de ketchup\", correctContainer: \"plastic\" },\n  { id: 31, name: \"Envase de mayonesa\", correctContainer: \"plastic\" },\n  { id: 32, name: \"Film transparente\", correctContainer: \"plastic\" },\n  { id: 33, name: \"Bote de vitaminas\", correctContainer: \"plastic\" },\n  { id: 34, name: \"Envase de complementos\", correctContainer: \"plastic\" },\n  { id: 35, name: \"Botella de agua oxigenada\", correctContainer: \"plastic\" },\n  { id: 36, name: \"Envase de protector solar\", correctContainer: \"plastic\" },\n  { id: 37, name: \"Bolsa zip\", correctContainer: \"plastic\" },\n  { id: 38, name: \"Envase de comida para mascotas\", correctContainer: \"plastic\" },\n\n  // VIDRIO (38 items)\n  { id: 39, name: \"Botella de vino\", correctContainer: \"glass\" },\n  { id: 40, name: \"Tarro de mermelada\", correctContainer: \"glass\" },\n  { id: 41, name: \"Botella de cerveza\", correctContainer: \"glass\" },\n  { id: 42, name: \"Frasco de perfume\", correctContainer: \"glass\" },\n  { id: 43, name: \"Botella de whisky\", correctContainer: \"glass\" },\n  { id: 44, name: \"Tarro de miel\", correctContainer: \"glass\" },\n  { id: 45, name: \"Botella de cava\", correctContainer: \"glass\" },\n  { id: 46, name: \"Frasco de colonia\", correctContainer: \"glass\" },\n  { id: 47, name: \"Botella de aceite de oliva\", correctContainer: \"glass\" },\n  { id: 48, name: \"Tarro de conservas\", correctContainer: \"glass\" },\n  { id: 49, name: \"Botella de zumo\", correctContainer: \"glass\" },\n  { id: 50, name: \"Vaso de cristal\", correctContainer: \"glass\" },\n  { id: 51, name: \"Botella de licor\", correctContainer: \"glass\" },\n  { id: 52, name: \"Tarro de pickles\", correctContainer: \"glass\" },\n  { id: 53, name: \"Botella de ginebra\", correctContainer: \"glass\" },\n  { id: 54, name: \"Frasco de medicinas\", correctContainer: \"glass\" },\n  { id: 55, name: \"Botella de vinagre\", correctContainer: \"glass\" },\n  { id: 56, name: \"Tarro de mostaza\", correctContainer: \"glass\" },\n  { id: 57, name: \"Botella de ron\", correctContainer: \"glass\" },\n  { id: 58, name: \"Frasco de especias\", correctContainer: \"glass\" },\n  { id: 59, name: \"Botella de sidra\", correctContainer: \"glass\" },\n  { id: 60, name: \"Tarro de pepinillos\", correctContainer: \"glass\" },\n  { id: 61, name: \"Botella de agua mineral\", correctContainer: \"glass\" },\n  { id: 62, name: \"Frasco de mermelada artesanal\", correctContainer: \"glass\" },\n  { id: 63, name: \"Botella de vermut\", correctContainer: \"glass\" },\n  { id: 64, name: \"Tarro de aceitunas\", correctContainer: \"glass\" },\n  { id: 65, name: \"Botella de champán\", correctContainer: \"glass\" },\n  { id: 66, name: \"Frasco de café instantáneo\", correctContainer: \"glass\" },\n  { id: 67, name: \"Botella de salsa de tomate\", correctContainer: \"glass\" },\n  { id: 68, name: \"Tarro de pimientos\", correctContainer: \"glass\" },\n  { id: 69, name: \"Botella de aperitivo\", correctContainer: \"glass\" },\n  { id: 70, name: \"Frasco de vainilla\", correctContainer: \"glass\" },\n  { id: 71, name: \"Botella de tónica\", correctContainer: \"glass\" },\n  { id: 72, name: \"Tarro de salsa\", correctContainer: \"glass\" },\n  { id: 73, name: \"Botella de limoncello\", correctContainer: \"glass\" },\n  { id: 74, name: \"Frasco de extractos\", correctContainer: \"glass\" },\n  { id: 75, name: \"Botella de brandy\", correctContainer: \"glass\" },\n  { id: 76, name: \"Tarro de tomates secos\", correctContainer: \"glass\" },\n\n  // PAPEL (38 items)\n  { id: 77, name: \"Periódico\", correctContainer: \"paper\" },\n  { id: 78, name: \"Revista\", correctContainer: \"paper\" },\n  { id: 79, name: \"Caja de cartón\", correctContainer: \"paper\" },\n  { id: 80, name: \"Folleto publicitario\", correctContainer: \"paper\" },\n  { id: 81, name: \"Sobre de carta\", correctContainer: \"paper\" },\n  { id: 82, name: \"Cuaderno usado\", correctContainer: \"paper\" },\n  { id: 83, name: \"Caja de cereales\", correctContainer: \"paper\" },\n  { id: 84, name: \"Papel de regalo\", correctContainer: \"paper\" },\n  { id: 85, name: \"Catálogo comercial\", correctContainer: \"paper\" },\n  { id: 86, name: \"Ticket de compra\", correctContainer: \"paper\" },\n  { id: 87, name: \"Caja de zapatos\", correctContainer: \"paper\" },\n  { id: 88, name: \"Papel de oficina\", correctContainer: \"paper\" },\n  { id: 89, name: \"Envoltorio de regalo\", correctContainer: \"paper\" },\n  { id: 90, name: \"Factura\", correctContainer: \"paper\" },\n  { id: 91, name: \"Caja de pizza\", correctContainer: \"paper\" },\n  { id: 92, name: \"Libreta vieja\", correctContainer: \"paper\" },\n  { id: 93, name: \"Caja de medicinas\", correctContainer: \"paper\" },\n  { id: 94, name: \"Papel de carta\", correctContainer: \"paper\" },\n  { id: 95, name: \"Envase tetrabrik\", correctContainer: \"paper\" },\n  { id: 96, name: \"Agenda antigua\", correctContainer: \"paper\" },\n  { id: 97, name: \"Caja de galletas\", correctContainer: \"paper\" },\n  { id: 98, name: \"Papel bond\", correctContainer: \"paper\" },\n  { id: 99, name: \"Carpeta de documentos\", correctContainer: \"paper\" },\n  { id: 100, name: \"Recibo\", correctContainer: \"paper\" },\n  { id: 101, name: \"Caja de envío\", correctContainer: \"paper\" },\n  { id: 102, name: \"Papel de periódico\", correctContainer: \"paper\" },\n  { id: 103, name: \"Bolsa de papel\", correctContainer: \"paper\" },\n  { id: 104, name: \"Postal\", correctContainer: \"paper\" },\n  { id: 105, name: \"Caja de té\", correctContainer: \"paper\" },\n  { id: 106, name: \"Papel de fax\", correctContainer: \"paper\" },\n  { id: 107, name: \"Guía telefónica\", correctContainer: \"paper\" },\n  { id: 108, name: \"Documento impreso\", correctContainer: \"paper\" },\n  { id: 109, name: \"Caja de pasta\", correctContainer: \"paper\" },\n  { id: 110, name: \"Papel de impresora\", correctContainer: \"paper\" },\n  { id: 111, name: \"Caja de pañuelos\", correctContainer: \"paper\" },\n  { id: 112, name: \"Formulario\", correctContainer: \"paper\" },\n  { id: 113, name: \"Caja de arroz\", correctContainer: \"paper\" },\n  { id: 114, name: \"Volante\", correctContainer: \"paper\" },\n\n  // ORGÁNICO (36 items)\n  { id: 115, name: \"Cáscara de plátano\", correctContainer: \"organic\" },\n  { id: 116, name: \"Restos de manzana\", correctContainer: \"organic\" },\n  { id: 117, name: \"Cáscara de naranja\", correctContainer: \"organic\" },\n  { id: 118, name: \"Huesos de pollo\", correctContainer: \"organic\" },\n  { id: 119, name: \"Piel de patata\", correctContainer: \"organic\" },\n  { id: 120, name: \"Restos de lechuga\", correctContainer: \"organic\" },\n  { id: 121, name: \"Cáscara de huevo\", correctContainer: \"organic\" },\n  { id: 122, name: \"Restos de pescado\", correctContainer: \"organic\" },\n  { id: 123, name: \"Hojas de verduras\", correctContainer: \"organic\" },\n  { id: 124, name: \"Restos de pan\", correctContainer: \"organic\" },\n  { id: 125, name: \"Cáscara de limón\", correctContainer: \"organic\" },\n  { id: 126, name: \"Huesos de cerdo\", correctContainer: \"organic\" },\n  { id: 127, name: \"Restos de tomate\", correctContainer: \"organic\" },\n  { id: 128, name: \"Posos de café\", correctContainer: \"organic\" },\n  { id: 129, name: \"Cáscara de cebolla\", correctContainer: \"organic\" },\n  { id: 130, name: \"Restos de arroz\", correctContainer: \"organic\" },\n  { id: 131, name: \"Hojas de té\", correctContainer: \"organic\" },\n  { id: 132, name: \"Restos de pasta\", correctContainer: \"organic\" },\n  { id: 133, name: \"Cáscara de ajo\", correctContainer: \"organic\" },\n  { id: 134, name: \"Huesos de ternera\", correctContainer: \"organic\" },\n  { id: 135, name: \"Restos de verduras\", correctContainer: \"organic\" },\n  { id: 136, name: \"Flores marchitas\", correctContainer: \"organic\" },\n  { id: 137, name: \"Restos de fruta\", correctContainer: \"organic\" },\n  { id: 138, name: \"Cáscara de sandía\", correctContainer: \"organic\" },\n  { id: 139, name: \"Huesos de cordero\", correctContainer: \"organic\" },\n  { id: 140, name: \"Restos de ensalada\", correctContainer: \"organic\" },\n  { id: 141, name: \"Cáscara de melón\", correctContainer: \"organic\" },\n  { id: 142, name: \"Restos de carne\", correctContainer: \"organic\" },\n  { id: 143, name: \"Hojas secas\", correctContainer: \"organic\" },\n  { id: 144, name: \"Restos de sopa\", correctContainer: \"organic\" },\n  { id: 145, name: \"Cáscara de piña\", correctContainer: \"organic\" },\n  { id: 146, name: \"Espinas de pescado\", correctContainer: \"organic\" },\n  { id: 147, name: \"Restos de verdura cocida\", correctContainer: \"organic\" },\n  { id: 148, name: \"Pulpa de fruta\", correctContainer: \"organic\" },\n  { id: 149, name: \"Restos de comida\", correctContainer: \"organic\" },\n  { id: 150, name: \"Hierba cortada\", correctContainer: \"organic\" }\n];\n\nexport function getRandomWasteItem(): WasteItem {\n  const randomIndex = Math.floor(Math.random() * WASTE_ITEMS.length);\n  return WASTE_ITEMS[randomIndex];\n}\n\nexport function getWasteItemsByType(type: TrashType): WasteItem[] {\n  return WASTE_ITEMS.filter(item => item.correctContainer === type);\n}","size_bytes":10979},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/GameUI.tsx":{"content":"import { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\n\nexport default function GameUI() {\n  const { \n    score, \n    lives, \n    coins,\n    gameState, \n    startGame, \n    startTutorial,\n    restartGame,\n    classificationMessage,\n    combo,\n    currentTutorialStep,\n    nextTutorialStep,\n    completeTutorial,\n    revivePlayer,\n    canRevive,\n    highScore\n  } = useRecyclingGame();\n\n  if (gameState === 'menu') {\n    return (\n      <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10\">\n        <div className=\"bg-white rounded-lg p-8 text-center shadow-lg max-w-md\">\n          <h1 className=\"text-4xl font-bold text-green-600 mb-4\">\n            🌍 EcoRunner 🌍\n          </h1>\n          <p className=\"text-lg text-gray-700 mb-6\">\n            ¡Ayuda a limpiar las calles clasificando la basura correctamente!\n          </p>\n          <div className=\"mb-6 text-left\">\n            <h3 className=\"font-bold text-lg mb-2\">Controles:</h3>\n            <p className=\"text-sm mb-1\">← → : Cambiar carril</p>\n            <p className=\"text-sm mb-1\">Espacio: Saltar y clasificar</p>\n            <p className=\"text-sm\">R: Reiniciar</p>\n          </div>\n          <div className=\"mb-6 text-left\">\n            <h3 className=\"font-bold text-lg mb-2\">Reciclaje Correcto:</h3>\n            <p className=\"text-sm mb-1\">🟡 Plástico (amarillo)</p>\n            <p className=\"text-sm mb-1\">🟢 Vidrio (verde)</p>\n            <p className=\"text-sm mb-1\">🟤 Orgánico (marrón)</p>\n            <p className=\"text-sm\">🔵 Papel (azul)</p>\n          </div>\n          <div className=\"mb-6 text-left\">\n            <h3 className=\"font-bold text-lg mb-2\">Cómo Jugar:</h3>\n            <p className=\"text-sm mb-1\">• Muévete entre carriles con ← →</p>\n            <p className=\"text-sm mb-1\">• Colócate en el carril del cubo correcto</p>\n            <p className=\"text-sm mb-1\">• Salta con ESPACIO para clasificar</p>\n            <p className=\"text-sm\">• Evita chocar con la basura sin clasificar</p>\n          </div>\n          <div className=\"space-y-4\">\n            <button\n              onClick={startTutorial}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-6 rounded-lg text-xl w-full\"\n            >\n              🎓 Tutorial\n            </button>\n            <button\n              onClick={startGame}\n              className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg text-xl w-full\"\n            >\n              ¡Jugar Ahora!\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (gameState === 'tutorial') {\n    return (\n      <>\n        {/* Tutorial HUD - simplified */}\n        <div className=\"absolute top-4 left-4 bg-blue-600 bg-opacity-90 text-white p-4 rounded-lg z-10 max-w-md\">\n          <div className=\"text-lg font-bold mb-2\">🎓 Tutorial EcoRunner</div>\n          {currentTutorialStep && (\n            <>\n              <h3 className=\"text-lg font-bold mb-2\">{currentTutorialStep.title}</h3>\n              <p className=\"text-sm mb-3\">{currentTutorialStep.description}</p>\n              <p className=\"text-yellow-200 font-semibold\">{currentTutorialStep.instruction}</p>\n            </>\n          )}\n        </div>\n        \n        {/* Tutorial Controls */}\n        <div className=\"absolute bottom-4 right-4 bg-white bg-opacity-90 p-4 rounded-lg z-10\">\n          <button\n            onClick={nextTutorialStep}\n            className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded mr-2\"\n          >\n            Continuar\n          </button>\n          <button\n            onClick={completeTutorial}\n            className=\"bg-gray-500 hover:bg-gray-600 text-white font-bold py-2 px-4 rounded\"\n          >\n            Saltar Tutorial\n          </button>\n        </div>\n\n        {/* Tutorial classification feedback */}\n        {classificationMessage && (\n          <div className=\"absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20\">\n            <div className={`text-2xl font-bold px-6 py-3 rounded-lg ${\n              classificationMessage.includes('¡Correcto!') || classificationMessage.includes('¡Bien!') || classificationMessage.includes('¡Excelente!')\n                ? 'bg-green-500 text-white' \n                : 'bg-blue-500 text-white'\n            }`}>\n              {classificationMessage}\n            </div>\n          </div>\n        )}\n      </>\n    );\n  }\n\n  if (gameState === 'gameOver') {\n    return (\n      <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 z-10\">\n        <div className=\"bg-white rounded-lg p-8 text-center shadow-lg max-w-md\">\n          <h2 className=\"text-3xl font-bold text-red-600 mb-4\">¡Juego Terminado!</h2>\n          <p className=\"text-xl mb-2\">Puntuación Final: {score}</p>\n          <p className=\"text-lg mb-2\">🏆 Récord: {highScore}</p>\n          <p className=\"text-xl mb-4\">💰 Monedas: {coins}</p>\n          \n          <div className=\"space-y-3\">\n            {canRevive() && (\n              <button\n                onClick={revivePlayer}\n                className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-6 rounded-lg text-lg w-full\"\n              >\n                💖 Revivir (150 monedas)\n              </button>\n            )}\n            \n            <button\n              onClick={restartGame}\n              className=\"bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full\"\n            >\n              🔄 Jugar de Nuevo\n            </button>\n          </div>\n          \n          {!canRevive() && (\n            <p className=\"text-sm text-gray-600 mt-3\">\n              Necesitas al menos 150 monedas para revivir\n            </p>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {/* HUD */}\n      <div className=\"absolute top-4 left-4 bg-black bg-opacity-70 text-white p-4 rounded-lg z-10\">\n        <div className=\"text-xl font-bold mb-2\">Puntuación: {score}</div>\n        <div className=\"text-lg mb-2\">🏆 Récord: {highScore}</div>\n        <div className=\"text-lg mb-2\">Vidas: {'❤️'.repeat(lives)}</div>\n        <div className=\"text-lg mb-2\">💰 Monedas: {coins}</div>\n        {combo > 1 && (\n          <div className=\"text-yellow-400 text-lg font-bold\">\n            ¡Combo x{combo}!\n          </div>\n        )}\n      </div>\n\n      {/* Classification feedback */}\n      {classificationMessage && (\n        <div className=\"absolute top-1/3 left-1/2 transform -translate-x-1/2 -translate-y-1/2 z-20\">\n          <div className={`text-3xl font-bold px-6 py-3 rounded-lg ${\n            classificationMessage.includes('¡Correcto!') \n              ? 'bg-green-500 text-white' \n              : 'bg-red-500 text-white'\n          }`}>\n            {classificationMessage}\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"absolute bottom-4 left-1/2 transform -translate-x-1/2 bg-black bg-opacity-70 text-white p-2 rounded text-sm z-10\">\n        Usa ← → para cambiar carril • ESPACIO para saltar y clasificar\n      </div>\n    </>\n  );\n}\n","size_bytes":7167},"client/src/components/InfiniteEnvironment.tsx":{"content":"import { useTexture } from \"@react-three/drei\";\nimport { useMemo, useRef } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\nimport { useGameThemes } from \"../lib/stores/useGameThemes\";\nimport * as THREE from \"three\";\n\n// Chunk system constants\nconst CHUNK_SIZE = 30; // Length of each chunk in units\nconst RENDER_DISTANCE = 120; // Distance ahead/behind player to render chunks\nconst CHUNKS_AHEAD = Math.ceil(RENDER_DISTANCE / CHUNK_SIZE);\nconst CHUNKS_BEHIND = 2; // Keep fewer chunks behind for performance\n\n// Environment object types\ninterface EnvironmentObject {\n  id: string;\n  type: 'building' | 'tree' | 'streetlight' | 'sign' | 'truck' | 'debris' | 'web' | 'snowflake';\n  position: { x: number; y: number; z: number };\n  rotation?: { x: number; y: number; z: number };\n  scale?: { x: number; y: number; z: number };\n  color?: string;\n  variant?: number;\n}\n\ninterface TerrainChunk {\n  id: number;\n  startZ: number;\n  endZ: number;\n  objects: EnvironmentObject[];\n  generated: boolean;\n}\n\n// Seeded random number generator for consistent generation\nclass SeededRandom {\n  private seed: number;\n  \n  constructor(seed: number) {\n    this.seed = seed;\n  }\n  \n  next(): number {\n    const x = Math.sin(this.seed++) * 10000;\n    return x - Math.floor(x);\n  }\n  \n  range(min: number, max: number): number {\n    return min + this.next() * (max - min);\n  }\n  \n  choice<T>(array: T[]): T {\n    return array[Math.floor(this.next() * array.length)];\n  }\n}\n\nfunction generateChunkObjects(chunkId: number, startZ: number, endZ: number, decorations: 'none' | 'webs' | 'snow'): EnvironmentObject[] {\n  const objects: EnvironmentObject[] = [];\n  const rng = new SeededRandom(chunkId * 12345); // Consistent seed per chunk\n  \n  // Building colors for variety\n  const buildingColors = ['#8B7355', '#A0522D', '#696969', '#778899', '#CD853F', '#A0522D'];\n  const truckColors = ['#FF6B6B', '#4ECDC4', '#95E1D3', '#F8E71C', '#4CAF50', '#2196F3'];\n  \n  // Generate buildings (more varied and professional)\n  const buildingCount = Math.floor(rng.range(2, 5));\n  for (let i = 0; i < buildingCount; i++) {\n    const side = rng.next() > 0.5 ? 1 : -1; // Left or right side of road\n    const xPos = side * rng.range(12, 20); // Distance from road center\n    const zPos = rng.range(startZ + 2, endZ - 2);\n    const height = rng.range(2, 6);\n    const width = rng.range(2.5, 4);\n    const depth = rng.range(3, 5);\n    \n    objects.push({\n      id: `building-${chunkId}-${i}`,\n      type: 'building',\n      position: { x: xPos, y: height / 2, z: zPos },\n      scale: { x: width, y: height, z: depth },\n      color: rng.choice(buildingColors),\n      variant: Math.floor(rng.range(0, 3))\n    });\n  }\n  \n  // Generate trees (using green boxes for now)\n  const treeCount = Math.floor(rng.range(3, 8));\n  for (let i = 0; i < treeCount; i++) {\n    const side = rng.next() > 0.5 ? 1 : -1;\n    const xPos = side * rng.range(8, 15);\n    const zPos = rng.range(startZ + 1, endZ - 1);\n    const height = rng.range(1.5, 3);\n    \n    objects.push({\n      id: `tree-${chunkId}-${i}`,\n      type: 'tree',\n      position: { x: xPos, y: height / 2, z: zPos },\n      scale: { x: 0.8, y: height, z: 0.8 },\n      color: '#2E7D32',\n      variant: Math.floor(rng.range(0, 2))\n    });\n  }\n  \n  // Generate street lights\n  const lightCount = Math.floor(rng.range(1, 3));\n  for (let i = 0; i < lightCount; i++) {\n    const side = rng.next() > 0.5 ? 1 : -1;\n    const xPos = side * 6; // Closer to road for street lighting\n    const zPos = rng.range(startZ + 5, endZ - 5);\n    \n    objects.push({\n      id: `streetlight-${chunkId}-${i}`,\n      type: 'streetlight',\n      position: { x: xPos, y: 2.5, z: zPos },\n      scale: { x: 0.3, y: 5, z: 0.3 },\n      color: '#444444'\n    });\n  }\n  \n  // Generate parked trucks occasionally\n  if (rng.next() > 0.7) {\n    const side = rng.next() > 0.5 ? 1 : -1;\n    const xPos = side * rng.range(8, 12);\n    const zPos = rng.range(startZ + 3, endZ - 3);\n    \n    objects.push({\n      id: `truck-${chunkId}`,\n      type: 'truck',\n      position: { x: xPos, y: 0.75, z: zPos },\n      rotation: { x: 0, y: side > 0 ? 0 : Math.PI, z: 0 },\n      scale: { x: 2, y: 1.5, z: 4 },\n      color: rng.choice(truckColors)\n    });\n  }\n  \n  // Generate debris/litter scattered around\n  const debrisCount = Math.floor(rng.range(5, 12));\n  for (let i = 0; i < debrisCount; i++) {\n    const xPos = rng.range(-18, 18);\n    const zPos = rng.range(startZ, endZ);\n    const debrisColors = ['#F8E71C', '#4CAF50', '#8D6E63', '#2196F3'];\n    \n    objects.push({\n      id: `debris-${chunkId}-${i}`,\n      type: 'debris',\n      position: { x: xPos, y: -0.3, z: zPos },\n      scale: { x: 0.15, y: 0.08, z: 0.15 },\n      color: rng.choice(debrisColors)\n    });\n  }\n  \n  // Generate theme-specific decorations\n  if (decorations === 'webs') {\n    const webCount = Math.floor(rng.range(2, 5));\n    for (let i = 0; i < webCount; i++) {\n      const side = rng.next() > 0.5 ? 1 : -1;\n      const xPos = side * rng.range(6, 14);\n      const zPos = rng.range(startZ + 2, endZ - 2);\n      const yPos = rng.range(1.5, 3.5);\n      \n      objects.push({\n        id: `web-${chunkId}-${i}`,\n        type: 'web',\n        position: { x: xPos, y: yPos, z: zPos },\n        scale: { x: 1, y: 1, z: 0.1 },\n        color: '#CCCCCC',\n        variant: Math.floor(rng.range(0, 2))\n      });\n    }\n  } else if (decorations === 'snow') {\n    const snowCount = Math.floor(rng.range(8, 15));\n    for (let i = 0; i < snowCount; i++) {\n      const xPos = rng.range(-15, 15);\n      const yPos = rng.range(2, 6);\n      const zPos = rng.range(startZ, endZ);\n      \n      objects.push({\n        id: `snowflake-${chunkId}-${i}`,\n        type: 'snowflake',\n        position: { x: xPos, y: yPos, z: zPos },\n        scale: { x: 0.15, y: 0.15, z: 0.15 },\n        color: '#FFFFFF',\n        variant: Math.floor(rng.range(0, 3))\n      });\n    }\n  }\n  \n  return objects;\n}\n\nfunction EnvironmentObject({ object }: { object: EnvironmentObject }) {\n  const woodTexture = useTexture(\"/textures/wood.jpg\");\n  const grassTexture = useTexture(\"/textures/grass.png\");\n  \n  const { position, rotation = { x: 0, y: 0, z: 0 }, scale = { x: 1, y: 1, z: 1 }, color, type, variant } = object;\n  \n  // Different geometries and materials based on type\n  const renderObject = () => {\n    switch (type) {\n      case 'building':\n        return (\n          <group>\n            {/* Main building */}\n            <mesh castShadow receiveShadow>\n              <boxGeometry args={[scale.x, scale.y, scale.z]} />\n              <meshLambertMaterial color={color} />\n            </mesh>\n            \n            {/* Building details based on variant */}\n            {variant === 1 && (\n              <mesh position={[0, scale.y * 0.4, scale.z * 0.45]} castShadow>\n                <boxGeometry args={[scale.x * 0.8, scale.y * 0.2, 0.1]} />\n                <meshLambertMaterial color={new THREE.Color(color!).multiplyScalar(0.9)} />\n              </mesh>\n            )}\n            \n            {variant === 2 && (\n              <mesh position={[0, scale.y * 0.35, 0]} castShadow>\n                <boxGeometry args={[scale.x * 1.1, scale.y * 0.3, scale.z * 1.1]} />\n                <meshLambertMaterial color={new THREE.Color(color!).multiplyScalar(0.7)} />\n              </mesh>\n            )}\n          </group>\n        );\n        \n      case 'tree':\n        return (\n          <group>\n            {/* Tree trunk */}\n            <mesh position={[0, -scale.y * 0.3, 0]} castShadow>\n              <cylinderGeometry args={[0.2, 0.25, scale.y * 0.6, 8]} />\n              <meshLambertMaterial color=\"#8D6E63\" />\n            </mesh>\n            \n            {/* Tree foliage */}\n            <mesh position={[0, scale.y * 0.2, 0]} castShadow>\n              <sphereGeometry args={[scale.y * 0.4, 8, 6]} />\n              <meshLambertMaterial color={color} />\n            </mesh>\n          </group>\n        );\n        \n      case 'streetlight':\n        return (\n          <group>\n            {/* Pole */}\n            <mesh castShadow>\n              <cylinderGeometry args={[0.1, 0.15, scale.y, 8]} />\n              <meshLambertMaterial color={color} />\n            </mesh>\n            \n            {/* Light fixture */}\n            <mesh position={[0, scale.y * 0.4, 0]} castShadow>\n              <sphereGeometry args={[0.3, 8, 6]} />\n              <meshLambertMaterial color=\"#FFEB3B\" emissive=\"#FFEB3B\" emissiveIntensity={0.1} />\n            </mesh>\n          </group>\n        );\n        \n      case 'truck':\n        return (\n          <group>\n            {/* Truck body */}\n            <mesh castShadow>\n              <boxGeometry args={[scale.x, scale.y, scale.z]} />\n              <meshLambertMaterial color={color} />\n            </mesh>\n            \n            {/* Truck cab */}\n            <mesh position={[0, scale.y * 0.3, scale.z * 0.3]} castShadow>\n              <boxGeometry args={[scale.x * 0.9, scale.y * 0.7, scale.z * 0.25]} />\n              <meshLambertMaterial color={new THREE.Color(color!).multiplyScalar(0.8)} />\n            </mesh>\n            \n            {/* Wheels */}\n            {[-scale.x * 0.4, scale.x * 0.4].map((wheelX, idx) => (\n              <mesh key={`front-wheel-${idx}`} position={[wheelX, -scale.y * 0.4, scale.z * 0.25]} rotation={[0, 0, Math.PI / 2]} castShadow>\n                <cylinderGeometry args={[0.25, 0.25, 0.15, 8]} />\n                <meshLambertMaterial color=\"#333333\" />\n              </mesh>\n            ))}\n            \n            {[-scale.x * 0.4, scale.x * 0.4].map((wheelX, idx) => (\n              <mesh key={`rear-wheel-${idx}`} position={[wheelX, -scale.y * 0.4, -scale.z * 0.25]} rotation={[0, 0, Math.PI / 2]} castShadow>\n                <cylinderGeometry args={[0.25, 0.25, 0.15, 8]} />\n                <meshLambertMaterial color=\"#333333\" />\n              </mesh>\n            ))}\n          </group>\n        );\n        \n      case 'debris':\n        return (\n          <mesh castShadow>\n            <boxGeometry args={[scale.x, scale.y, scale.z]} />\n            <meshLambertMaterial color={color} />\n          </mesh>\n        );\n        \n      case 'web':\n        return (\n          <group>\n            <mesh>\n              <planeGeometry args={[scale.x, scale.y]} />\n              <meshLambertMaterial \n                color={color} \n                transparent \n                opacity={0.6}\n                side={THREE.DoubleSide}\n              />\n            </mesh>\n            <mesh position={[-scale.x * 0.3, scale.y * 0.2, 0]}>\n              <boxGeometry args={[0.02, scale.y * 0.6, 0.02]} />\n              <meshLambertMaterial color=\"#FFFFFF\" />\n            </mesh>\n            <mesh position={[scale.x * 0.3, -scale.y * 0.2, 0]}>\n              <boxGeometry args={[0.02, scale.y * 0.6, 0.02]} />\n              <meshLambertMaterial color=\"#FFFFFF\" />\n            </mesh>\n          </group>\n        );\n        \n      case 'snowflake':\n        return (\n          <group>\n            <mesh>\n              <sphereGeometry args={[scale.x, 6, 4]} />\n              <meshLambertMaterial color={color} emissive=\"#FFFFFF\" emissiveIntensity={0.3} />\n            </mesh>\n          </group>\n        );\n        \n      default:\n        return (\n          <mesh castShadow>\n            <boxGeometry args={[scale.x, scale.y, scale.z]} />\n            <meshLambertMaterial color={color} />\n          </mesh>\n        );\n    }\n  };\n  \n  return (\n    <group position={[position.x, position.y, position.z]} rotation={[rotation.x, rotation.y, rotation.z]}>\n      {renderObject()}\n    </group>\n  );\n}\n\nexport default function InfiniteEnvironment() {\n  const asphaltTexture = useTexture(\"/textures/asphalt.png\");\n  const grassTexture = useTexture(\"/textures/grass.png\");\n  \n  const { playerPosition } = useRecyclingGame();\n  const { getCurrentTheme } = useGameThemes();\n  const theme = getCurrentTheme();\n  const chunksRef = useRef<Map<number, TerrainChunk>>(new Map());\n  const activeChunksRef = useRef<Set<number>>(new Set());\n  const lastLoggedChunkRef = useRef<number | null>(null);\n  \n  // Function to generate chunk if it doesn't exist\n  const ensureChunk = (chunkId: number) => {\n    if (!chunksRef.current.has(chunkId)) {\n      const startZ = chunkId * CHUNK_SIZE;\n      const endZ = startZ + CHUNK_SIZE;\n      \n      const chunk: TerrainChunk = {\n        id: chunkId,\n        startZ,\n        endZ,\n        objects: generateChunkObjects(chunkId, startZ, endZ, theme.decorations),\n        generated: true\n      };\n      \n      chunksRef.current.set(chunkId, chunk);\n    }\n  };\n  \n  // Update active chunks based on player position\n  useFrame(() => {\n    if (!playerPosition) return;\n    \n    const playerChunkId = Math.floor(playerPosition.z / CHUNK_SIZE);\n    const newActiveChunks = new Set<number>();\n    \n    // Generate chunks around player\n    for (let i = playerChunkId - CHUNKS_BEHIND; i <= playerChunkId + CHUNKS_AHEAD; i++) {\n      ensureChunk(i);\n      newActiveChunks.add(i);\n    }\n    \n    // Clean up distant chunks for performance\n    const chunksToRemove: number[] = [];\n    chunksRef.current.forEach((chunk, chunkId) => {\n      if (!newActiveChunks.has(chunkId)) {\n        chunksToRemove.push(chunkId);\n      }\n    });\n    \n    // Remove old chunks and log for debugging\n    chunksToRemove.forEach(chunkId => {\n      chunksRef.current.delete(chunkId);\n    });\n    \n    // Debug logging only when entering a new chunk (prevent spam)\n    if (playerChunkId !== lastLoggedChunkRef.current) {\n      console.log(`Infinite Environment: Player entered chunk ${playerChunkId}, active chunks: ${Array.from(newActiveChunks).join(', ')}, total chunks: ${chunksRef.current.size}`);\n      lastLoggedChunkRef.current = playerChunkId;\n    }\n    \n    activeChunksRef.current = newActiveChunks;\n  });\n  \n  // Get visible chunks for rendering\n  const visibleChunks = useMemo(() => {\n    const chunks = Array.from(activeChunksRef.current)\n      .map(chunkId => chunksRef.current.get(chunkId))\n      .filter(chunk => chunk !== undefined) as TerrainChunk[];\n    \n    // Sort chunks by distance for better rendering order\n    return chunks.sort((a, b) => Math.abs(a.startZ - (playerPosition?.z || 0)) - Math.abs(b.startZ - (playerPosition?.z || 0)));\n  }, [activeChunksRef.current, playerPosition]);\n  \n  return (\n    <group>\n      {/* Infinite terrain generation */}\n      {visibleChunks.map(chunk => (\n        <group key={chunk.id}>\n          {/* Road section */}\n          <mesh position={[0, -0.5, chunk.startZ + CHUNK_SIZE / 2]} receiveShadow>\n            <boxGeometry args={[20, 0.1, CHUNK_SIZE]} />\n            <meshLambertMaterial map={asphaltTexture} />\n          </mesh>\n          \n          {/* Left sidewalk */}\n          <mesh position={[-10, -0.4, chunk.startZ + CHUNK_SIZE / 2]} receiveShadow>\n            <boxGeometry args={[4, 0.1, CHUNK_SIZE]} />\n            <meshLambertMaterial color=\"#CCCCCC\" />\n          </mesh>\n          \n          {/* Right sidewalk */}\n          <mesh position={[10, -0.4, chunk.startZ + CHUNK_SIZE / 2]} receiveShadow>\n            <boxGeometry args={[4, 0.1, CHUNK_SIZE]} />\n            <meshLambertMaterial color=\"#CCCCCC\" />\n          </mesh>\n          \n          {/* Lane delimiter lines */}\n          {[-2, 0, 2].map((x, index) => (\n            <mesh key={`lane-${chunk.id}-${index}`} position={[x, -0.35, chunk.startZ + CHUNK_SIZE / 2]} receiveShadow>\n              <boxGeometry args={[0.1, 0.05, CHUNK_SIZE]} />\n              <meshLambertMaterial color=\"#FFFFFF\" />\n            </mesh>\n          ))}\n          \n          {/* Grass areas beyond sidewalks */}\n          <mesh position={[-16, -0.45, chunk.startZ + CHUNK_SIZE / 2]} receiveShadow>\n            <boxGeometry args={[8, 0.05, CHUNK_SIZE]} />\n            <meshLambertMaterial map={grassTexture} />\n          </mesh>\n          \n          <mesh position={[16, -0.45, chunk.startZ + CHUNK_SIZE / 2]} receiveShadow>\n            <boxGeometry args={[8, 0.05, CHUNK_SIZE]} />\n            <meshLambertMaterial map={grassTexture} />\n          </mesh>\n          \n          {/* Environment objects for this chunk */}\n          {chunk.objects.map(object => (\n            <EnvironmentObject key={object.id} object={object} />\n          ))}\n        </group>\n      ))}\n      \n      {/* Game boundaries (invisible walls to keep player in play area) */}\n      {playerPosition && (\n        <>\n          <mesh position={[-4, -0.35, playerPosition.z]} receiveShadow>\n            <boxGeometry args={[0.2, 0.05, 1]} />\n            <meshLambertMaterial color=\"#FFFFFF\" />\n          </mesh>\n          \n          <mesh position={[4, -0.35, playerPosition.z]} receiveShadow>\n            <boxGeometry args={[0.2, 0.05, 1]} />\n            <meshLambertMaterial color=\"#FFFFFF\" />\n          </mesh>\n        </>\n      )}\n    </group>\n  );\n}","size_bytes":16824},"client/src/components/Game.tsx":{"content":"import { useFrame, useThree } from \"@react-three/fiber\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\nimport Player from \"./Player\";\nimport RecyclingBins from \"./RecyclingBins\";\nimport InfiniteEnvironment from \"./InfiniteEnvironment\";\nimport Lights from \"./Lights\";\n\nexport default function Game() {\n  const { camera } = useThree();\n  const { \n    gameState, \n    updateGame, \n    playerPosition\n  } = useRecyclingGame();\n\n  useFrame((state, delta) => {\n    // Update game logic\n    if (gameState === 'playing' || gameState === 'tutorial') {\n      updateGame(delta);\n    }\n    \n    // Camera following logic\n    if ((gameState === 'playing' || gameState === 'tutorial') && playerPosition) {\n      // Smooth camera following with third-person view\n      const targetCameraPosition = {\n        x: playerPosition.x, // Follow player's lane position\n        y: playerPosition.y + 4, // Camera above player\n        z: playerPosition.z - 6 // Camera behind player\n      };\n      \n      // Smooth camera movement\n      const lerpFactor = 1 - Math.pow(0.01, delta); // Smooth interpolation\n      camera.position.x += (targetCameraPosition.x - camera.position.x) * lerpFactor;\n      camera.position.y += (targetCameraPosition.y - camera.position.y) * lerpFactor;\n      camera.position.z += (targetCameraPosition.z - camera.position.z) * lerpFactor;\n      \n      // Camera looks at player position + slight forward offset\n      camera.lookAt(playerPosition.x, playerPosition.y + 1, playerPosition.z + 2);\n    }\n  });\n\n  return (\n    <>\n      <Lights />\n      <InfiniteEnvironment />\n      \n      {(gameState === 'playing' || gameState === 'tutorial') && (\n        <>\n          <Player />\n          <RecyclingBins />\n        </>\n      )}\n    </>\n  );\n}\n","size_bytes":1764},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7224},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"px-2 py-1.5 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute right-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5639},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary shadow focus:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-3.5 w-3.5 fill-primary\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1410},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/Player.tsx":{"content":"import { useRef, useEffect } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { useKeyboardControls } from \"@react-three/drei\";\nimport { Mesh, BoxGeometry, MeshLambertMaterial } from \"three\";\nimport * as THREE from \"three\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\nimport { usePlayerSkins } from \"../lib/stores/usePlayerSkins\";\n\nenum Controls {\n  left = 'left',\n  right = 'right',\n  jump = 'jump',\n  restart = 'restart'\n}\n\nexport default function Player() {\n  const meshRef = useRef<THREE.Group>(null);\n  const leftLegRef = useRef<THREE.Mesh>(null);\n  const rightLegRef = useRef<THREE.Mesh>(null);\n  const leftArmRef = useRef<THREE.Mesh>(null);\n  const rightArmRef = useRef<THREE.Mesh>(null);\n  const runningAnimationRef = useRef({ time: 0 });\n  const [subscribeKeys, getKeys] = useKeyboardControls<Controls>();\n  const { \n    playerPosition, \n    isJumping, \n    setPlayerLane, \n    jump, \n    gameState,\n    playerLane,\n    currentTutorialStep,\n    nextTutorialStep,\n    runningSpeed\n  } = useRecyclingGame();\n  \n  // Get current skin colors\n  const { getCurrentSkin } = usePlayerSkins();\n  const currentSkin = getCurrentSkin();\n\n  // Handle keyboard input\n  useEffect(() => {\n    const unsubscribeLeft = subscribeKeys(\n      (state) => state.right,\n      (pressed) => {\n        if (pressed && (gameState === 'playing' || gameState === 'tutorial')) {\n          console.log(\"Left key pressed, current lane:\", playerLane);\n          setPlayerLane(Math.max(0, playerLane - 1));\n          \n          // Tutorial progression\n          if (gameState === 'tutorial' && currentTutorialStep?.targetAction === 'move-left') {\n            setTimeout(() => nextTutorialStep(), 1000);\n          }\n        }\n      }\n    );\n\n    const unsubscribeRight = subscribeKeys(\n      (state) => state.left,\n      (pressed) => {\n        if (pressed && (gameState === 'playing' || gameState === 'tutorial')) {\n          console.log(\"Right key pressed, current lane:\", playerLane);\n          setPlayerLane(Math.min(3, playerLane + 1));\n          \n          // Tutorial progression\n          if (gameState === 'tutorial' && currentTutorialStep?.targetAction === 'move-right') {\n            setTimeout(() => nextTutorialStep(), 1000);\n          }\n        }\n      }\n    );\n\n    const unsubscribeJump = subscribeKeys(\n      (state) => state.jump,\n      (pressed) => {\n        if (pressed && (gameState === 'playing' || gameState === 'tutorial') && !isJumping) {\n          // Check if player is near containers before allowing jump\n          const CONTAINER_INTERVAL = 40;\n          const JUMP_ALLOWED_DISTANCE = 8; // Allow jumping when 8 units away from containers\n          \n          // Find the next container station ahead\n          const nextContainerZ = Math.ceil(playerPosition.z / CONTAINER_INTERVAL) * CONTAINER_INTERVAL;\n          const distanceToContainer = nextContainerZ - playerPosition.z;\n          \n          // Only allow jump if near containers\n          if (distanceToContainer <= JUMP_ALLOWED_DISTANCE && distanceToContainer > 0) {\n            console.log(\"Jump key pressed - near containers\");\n            jump();\n            \n            // Tutorial progression\n            if (gameState === 'tutorial' && currentTutorialStep?.targetAction === 'jump') {\n              setTimeout(() => nextTutorialStep(), 800);\n            }\n          } else {\n            console.log(\"Jump not allowed - not near containers\");\n          }\n        }\n      }\n    );\n\n    return () => {\n      unsubscribeLeft();\n      unsubscribeRight();\n      unsubscribeJump();\n    };\n  }, [subscribeKeys, setPlayerLane, jump, gameState, isJumping, playerLane]);\n\n  // Update player position and running animation\n  useFrame((state, delta) => {\n    if (meshRef.current) {\n      // Update position from game store\n      meshRef.current.position.x = playerPosition.x;\n      meshRef.current.position.y = playerPosition.y;\n      meshRef.current.position.z = playerPosition.z;\n      \n      // Running animation when playing\n      if ((gameState === 'playing' || gameState === 'tutorial') && !isJumping) {\n        const animSpeed = runningSpeed * 1.5; // Animation speed based on running speed\n        runningAnimationRef.current.time += delta * animSpeed;\n        \n        // Leg movement animation (running cycle)\n        const legSwing = Math.sin(runningAnimationRef.current.time) * 0.3;\n        const armSwing = Math.sin(runningAnimationRef.current.time + Math.PI) * 0.2;\n        \n        if (leftLegRef.current) {\n          leftLegRef.current.rotation.x = legSwing;\n        }\n        if (rightLegRef.current) {\n          rightLegRef.current.rotation.x = -legSwing;\n        }\n        if (leftArmRef.current) {\n          leftArmRef.current.rotation.x = armSwing;\n        }\n        if (rightArmRef.current) {\n          rightArmRef.current.rotation.x = -armSwing;\n        }\n        \n        // Slight head bobbing\n        const headBob = Math.sin(runningAnimationRef.current.time * 2) * 0.02;\n        meshRef.current.position.y += headBob;\n      }\n    }\n  });\n\n  return (\n    <group ref={meshRef} position={[0, 0.5, 0]} castShadow>\n      {/* Head */}\n      <mesh position={[0, 0.8, 0]} castShadow>\n        <sphereGeometry args={[0.2, 16, 16]} />\n        <meshLambertMaterial color={currentSkin.colors.head} />\n      </mesh>\n      \n      {/* Body */}\n      <mesh position={[0, 0.2, 0]} castShadow>\n        <boxGeometry args={[0.4, 0.6, 0.3]} />\n        <meshLambertMaterial color={currentSkin.colors.body} />\n      </mesh>\n      \n      {/* Left Arm */}\n      <mesh ref={leftArmRef} position={[-0.3, 0.3, 0]} castShadow>\n        <cylinderGeometry args={[0.08, 0.08, 0.4, 8]} />\n        <meshLambertMaterial color={currentSkin.colors.arms} />\n      </mesh>\n      \n      {/* Right Arm */}\n      <mesh ref={rightArmRef} position={[0.3, 0.3, 0]} castShadow>\n        <cylinderGeometry args={[0.08, 0.08, 0.4, 8]} />\n        <meshLambertMaterial color={currentSkin.colors.arms} />\n      </mesh>\n      \n      {/* Left Leg */}\n      <mesh ref={leftLegRef} position={[-0.12, -0.3, 0]} castShadow>\n        <cylinderGeometry args={[0.08, 0.08, 0.5, 8]} />\n        <meshLambertMaterial color={currentSkin.colors.legs} />\n      </mesh>\n      \n      {/* Right Leg */}\n      <mesh ref={rightLegRef} position={[0.12, -0.3, 0]} castShadow>\n        <cylinderGeometry args={[0.08, 0.08, 0.5, 8]} />\n        <meshLambertMaterial color={currentSkin.colors.legs} />\n      </mesh>\n      \n      {/* Eyes */}\n      <mesh position={[-0.08, 0.85, 0.18]} castShadow>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshLambertMaterial color={currentSkin.colors.eyes} />\n      </mesh>\n      \n      <mesh position={[0.08, 0.85, 0.18]} castShadow>\n        <sphereGeometry args={[0.03, 8, 8]} />\n        <meshLambertMaterial color={currentSkin.colors.eyes} />\n      </mesh>\n      \n      {/* Hair */}\n      <mesh position={[0, 0.95, 0]} castShadow>\n        <boxGeometry args={[0.3, 0.15, 0.3]} />\n        <meshLambertMaterial color={currentSkin.colors.hair} />\n      </mesh>\n      \n      {/* Hat (only for special skins) */}\n      {currentSkin.hasHat && (\n        <mesh position={[0, 1.05, 0]} castShadow>\n          <cylinderGeometry args={[0.25, 0.25, 0.1, 16]} />\n          <meshLambertMaterial color={currentSkin.hatColor || '#000000'} />\n        </mesh>\n      )}\n      \n      {currentSkin.hasHat && (\n        <mesh position={[0, 1.15, 0.05]} castShadow>\n          <sphereGeometry args={[0.15, 16, 16]} />\n          <meshLambertMaterial color={currentSkin.hatColor || '#000000'} />\n        </mesh>\n      )}\n    </group>\n  );\n}\n","size_bytes":7602},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n      {children}\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4280},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5124},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1198},"client/src/hooks/use-is-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path, { dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport { createServer as createViteServer, createLogger, type ServerOptions } from \"vite\";\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions: ServerOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        __dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(__dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2409},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-10 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected=true]:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4873},"client/src/lib/stores/useGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\n\nexport type GamePhase = \"ready\" | \"playing\" | \"ended\";\n\ninterface GameState {\n  phase: GamePhase;\n  \n  // Actions\n  start: () => void;\n  restart: () => void;\n  end: () => void;\n}\n\nexport const useGame = create<GameState>()(\n  subscribeWithSelector((set) => ({\n    phase: \"ready\",\n    \n    start: () => {\n      set((state) => {\n        // Only transition from ready to playing\n        if (state.phase === \"ready\") {\n          return { phase: \"playing\" };\n        }\n        return {};\n      });\n    },\n    \n    restart: () => {\n      set(() => ({ phase: \"ready\" }));\n    },\n    \n    end: () => {\n      set((state) => {\n        // Only transition from playing to ended\n        if (state.phase === \"playing\") {\n          return { phase: \"ended\" };\n        }\n        return {};\n      });\n    }\n  }))\n);\n","size_bytes":893},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-base shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":649},"client/src/components/RecyclingBins.tsx":{"content":"import { useMemo } from \"react\";\nimport * as THREE from \"three\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\nimport { TrashType } from \"../types/game\";\n\n// Container spawn interval (distance in units)\nconst CONTAINER_SPAWN_INTERVAL = 40; // Every 40 units\n\n// Container configurations for each type\nconst CONTAINER_CONFIGS = {\n  glass: { \n    color: '#2E7D32', // Dark green \n    metalColor: '#666666',\n    labelColor: '#FFFFFF',\n    type: 'glass',\n    lane: 0\n  },\n  organic: { \n    color: '#5D4037', // Dark brown\n    metalColor: '#666666', \n    labelColor: '#FFFFFF',\n    type: 'organic',\n    lane: 1\n  },\n  paper: { \n    color: '#1976D2', // Dark blue\n    metalColor: '#666666',\n    labelColor: '#FFFFFF', \n    type: 'paper',\n    lane: 2\n  },\n  plastic: { \n    color: '#FFD700', // Yellow\n    metalColor: '#666666',\n    labelColor: '#000000',\n    type: 'plastic',\n    lane: 3\n  }\n};\n\nconst LANE_POSITIONS = [-3, -1, 1, 3]; // x positions for 4 lanes\n\ninterface RealisticContainerProps {\n  config: typeof CONTAINER_CONFIGS[keyof typeof CONTAINER_CONFIGS];\n  position: { x: number; y: number; z: number };\n}\n\nfunction RealisticContainer({ config, position }: RealisticContainerProps) {\n  const { color, metalColor, labelColor } = config;\n  \n  return (\n    <group position={[position.x, position.y, position.z]}>\n      {/* Main container body - large industrial size */}\n      <mesh castShadow receiveShadow>\n        <cylinderGeometry args={[1.2, 1.3, 2.5, 16]} />\n        <meshLambertMaterial \n          color={color}\n        />\n      </mesh>\n      \n      {/* Container lid with handles */}\n      <mesh position={[0, 1.35, 0]} castShadow>\n        <cylinderGeometry args={[1.25, 1.25, 0.15, 16]} />\n        <meshLambertMaterial \n          color={new THREE.Color(color).multiplyScalar(0.9)}\n        />\n      </mesh>\n      \n      {/* Lid handle */}\n      <mesh position={[0, 1.5, 0]} castShadow>\n        <torusGeometry args={[0.15, 0.05, 8, 16]} />\n        <meshLambertMaterial color={metalColor} />\n      </mesh>\n      \n      {/* Side handles (left and right) */}\n      {[-1, 1].map((side, idx) => (\n        <group key={`handle-${idx}`} position={[side * 1.1, 0.3, 0]}>\n          <mesh castShadow>\n            <torusGeometry args={[0.12, 0.04, 6, 12]} />\n            <meshLambertMaterial color={metalColor} />\n          </mesh>\n        </group>\n      ))}\n      \n      {/* Wheels at the base */}\n      {[-0.8, 0.8].map((wheelX, idx) => (\n        <group key={`wheel-${idx}`} position={[wheelX, -1.2, 0.9]}>\n          <mesh castShadow rotation={[Math.PI / 2, 0, 0]}>\n            <cylinderGeometry args={[0.2, 0.2, 0.15, 12]} />\n            <meshLambertMaterial color=\"#1A1A1A\" />\n          </mesh>\n          {/* Wheel rim */}\n          <mesh position={[0, 0, 0.08]} rotation={[Math.PI / 2, 0, 0]}>\n            <torusGeometry args={[0.15, 0.03, 6, 12]} />\n            <meshLambertMaterial color={metalColor} />\n          </mesh>\n        </group>\n      ))}\n      \n      {/* Large recycling symbol on front */}\n      <mesh position={[0, 0.2, 1.31]} castShadow>\n        <cylinderGeometry args={[0.35, 0.35, 0.05, 3]} />\n        <meshLambertMaterial color={labelColor} />\n      </mesh>\n      \n      {/* Recycling arrows (simplified) */}\n      <mesh position={[0, 0.2, 1.35]} castShadow>\n        <torusGeometry args={[0.25, 0.04, 6, 12]} />\n        <meshLambertMaterial color={color} />\n      </mesh>\n      \n      {/* Type label plate */}\n      <mesh position={[0, -0.3, 1.32]} castShadow>\n        <boxGeometry args={[0.8, 0.25, 0.05]} />\n        <meshLambertMaterial color={labelColor} />\n      </mesh>\n      \n      {/* Label background for contrast */}\n      <mesh position={[0, -0.3, 1.34]} castShadow>\n        <boxGeometry args={[0.75, 0.2, 0.02]} />\n        <meshLambertMaterial color={color} />\n      </mesh>\n      \n      {/* Metal reinforcement bands */}\n      {[-0.7, 0, 0.7].map((bandY, idx) => (\n        <mesh key={`band-${idx}`} position={[0, bandY, 0]} castShadow>\n          <torusGeometry args={[1.32, 0.03, 6, 16]} />\n          <meshLambertMaterial color={metalColor} />\n        </mesh>\n      ))}\n      \n      {/* Drainage holes at bottom */}\n      {Array.from({ length: 8 }).map((_, idx) => {\n        const angle = (idx / 8) * Math.PI * 2;\n        const x = Math.cos(angle) * 0.9;\n        const z = Math.sin(angle) * 0.9;\n        return (\n          <mesh key={`drain-${idx}`} position={[x, -1.15, z]} castShadow>\n            <cylinderGeometry args={[0.04, 0.04, 0.1, 8]} />\n            <meshLambertMaterial color=\"#000000\" />\n          </mesh>\n        );\n      })}\n      \n      {/* Professional warning labels */}\n      <mesh position={[0.8, 0.8, 1.0]} castShadow rotation={[0, -0.3, 0]}>\n        <boxGeometry args={[0.3, 0.15, 0.02]} />\n        <meshLambertMaterial color=\"#FFD700\" />\n      </mesh>\n      \n      {/* Hinges on lid */}\n      {[-0.6, 0.6].map((hingeX, idx) => (\n        <mesh key={`hinge-${idx}`} position={[hingeX, 1.25, 1.1]} castShadow>\n          <boxGeometry args={[0.1, 0.15, 0.08]} />\n          <meshLambertMaterial color={metalColor} />\n        </mesh>\n      ))}\n      \n      {/* Base reinforcement ring */}\n      <mesh position={[0, -1.25, 0]} castShadow>\n        <torusGeometry args={[1.35, 0.05, 6, 16]} />\n        <meshLambertMaterial color={metalColor} />\n      </mesh>\n    </group>\n  );\n}\n\nexport default function RecyclingBins() {\n  const { playerPosition, distanceTraveled } = useRecyclingGame();\n  \n  // Generate container positions based on distance traveled\n  const containerPositions = useMemo(() => {\n    const containers: Array<{\n      id: string;\n      config: typeof CONTAINER_CONFIGS[keyof typeof CONTAINER_CONFIGS];\n      position: { x: number; y: number; z: number };\n      distance: number;\n    }> = [];\n    \n    // Calculate which container stations should be visible\n    const playerZ = playerPosition.z;\n    // Fix: Ensure containers always spawn ahead, never at z=0\n    // Find the next container station ahead of player (minimum z=40)\n    const baseDistance = Math.max(CONTAINER_SPAWN_INTERVAL, Math.ceil(distanceTraveled / CONTAINER_SPAWN_INTERVAL) * CONTAINER_SPAWN_INTERVAL);\n    const startDistance = baseDistance;\n    \n    // Show containers from current station and next 2 stations ahead\n    for (let i = 0; i <= 2; i++) {\n      const stationDistance = startDistance + (i * CONTAINER_SPAWN_INTERVAL);\n      const stationZ = stationDistance;\n      \n      // Only show if within reasonable render distance\n      if (Math.abs(stationZ - playerZ) <= 80) {\n        // Create container set for this station\n        const containerTypes: (keyof typeof CONTAINER_CONFIGS)[] = ['glass', 'organic', 'paper', 'plastic'];\n        \n        containerTypes.forEach((type) => {\n          const config = CONTAINER_CONFIGS[type];\n          containers.push({\n            id: `container-${type}-${stationDistance}`,\n            config,\n            position: {\n              x: LANE_POSITIONS[config.lane],\n              y: 1.25, // Raise containers above ground\n              z: stationZ\n            },\n            distance: stationDistance\n          });\n        });\n      }\n    }\n    \n    return containers;\n  }, [playerPosition.z, distanceTraveled]);\n  \n  return (\n    <group>\n      {containerPositions.map(({ id, config, position }) => (\n        <RealisticContainer\n          key={id}\n          config={config}\n          position={position}\n        />\n      ))}\n    </group>\n  );\n}","size_bytes":7446},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-9 items-center space-x-1 rounded-md border bg-background p-1 shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-4 w-4 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8522},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey[0] as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1376},"client/src/components/WasteCard.tsx":{"content":"import { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\n\ninterface WasteCardProps {\n  className?: string;\n}\n\nexport default function WasteCard({ className }: WasteCardProps) {\n  const { currentWasteItem } = useRecyclingGame();\n\n  if (!currentWasteItem) return null;\n\n  return (\n    <div className={`fixed top-4 right-4 z-20 ${className}`}>\n      <div className=\"bg-white border-4 border-gray-800 rounded-lg shadow-2xl p-4 w-56\">\n        {/* Header */}\n        <div className=\"text-center mb-3\">\n          <h2 className=\"text-lg font-bold text-gray-800 mb-2\">🗂️ Clasifica esto</h2>\n          <div className=\"w-full h-1 bg-gradient-to-r from-green-400 via-blue-400 to-yellow-400 rounded\"></div>\n        </div>\n\n        {/* Waste Item Display */}\n        <div className=\"text-center\">\n          <div className=\"bg-gray-100 rounded-lg p-3\">\n            <span className=\"text-2xl mb-1 block\">🗑️</span>\n            <h3 className=\"text-md font-bold text-gray-900\">{currentWasteItem.name}</h3>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":1069},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-primary/10\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":266},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-9 px-2 min-w-9\",\n        sm: \"h-8 px-1.5 min-w-8\",\n        lg: \"h-10 px-2.5 min-w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1486},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-2 w-full overflow-hidden rounded-full bg-primary/20\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":792},"client/src/components/SoundManager.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\n\nexport default function SoundManager() {\n  const backgroundMusicRef = useRef<HTMLAudioElement | null>(null);\n  const hitSoundRef = useRef<HTMLAudioElement | null>(null);\n  const successSoundRef = useRef<HTMLAudioElement | null>(null);\n  \n  const { gameState, score } = useRecyclingGame();\n  const prevScoreRef = useRef(score);\n\n  useEffect(() => {\n    // Initialize audio elements\n    backgroundMusicRef.current = new Audio(\"/sounds/background.mp3\");\n    hitSoundRef.current = new Audio(\"/sounds/hit.mp3\");\n    successSoundRef.current = new Audio(\"/sounds/success.mp3\");\n\n    // Configure background music\n    if (backgroundMusicRef.current) {\n      backgroundMusicRef.current.loop = true;\n      backgroundMusicRef.current.volume = 1.0;\n    }\n\n    // Configure sound effects\n    if (hitSoundRef.current) {\n      hitSoundRef.current.volume = 1.0;\n    }\n    \n    if (successSoundRef.current) {\n      successSoundRef.current.volume = 1.0;\n    }\n\n    return () => {\n      // Cleanup audio elements\n      if (backgroundMusicRef.current) {\n        backgroundMusicRef.current.pause();\n        backgroundMusicRef.current = null;\n      }\n    };\n  }, []);\n\n  // Handle background music based on game state\n  useEffect(() => {\n    if (backgroundMusicRef.current) {\n      if (gameState === 'playing') {\n        backgroundMusicRef.current.play().catch(console.log);\n      } else {\n        backgroundMusicRef.current.pause();\n      }\n    }\n  }, [gameState]);\n\n  // Play success sound when score increases\n  useEffect(() => {\n    if (score > prevScoreRef.current && successSoundRef.current) {\n      successSoundRef.current.currentTime = 0;\n      successSoundRef.current.play().catch(console.log);\n    }\n    prevScoreRef.current = score;\n  }, [score]);\n\n  return null; // This component doesn't render anything visible\n}\n","size_bytes":1916},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border px-4 py-3 text-sm [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground [&>svg~*]:pl-7\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1598},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path, { dirname } from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport { fileURLToPath } from \"url\";\nimport glsl from \"vite-plugin-glsl\";\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = dirname(__filename);\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    glsl(), // Add GLSL shader support\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(__dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(__dirname, \"shared\"),\n    },\n  },\n  root: path.resolve(__dirname, \"client\"),\n  build: {\n    outDir: path.resolve(__dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  // Add support for large models and audio files\n  assetsInclude: [\"**/*.gltf\", \"**/*.glb\", \"**/*.mp3\", \"**/*.ogg\", \"**/*.wav\"],\n});\n","size_bytes":896},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"hsl(var(--background))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n        sidebar: {\n          DEFAULT: \"hsl(var(--sidebar-background))\",\n          foreground: \"hsl(var(--sidebar-foreground))\",\n          primary: \"hsl(var(--sidebar-primary))\",\n          \"primary-foreground\": \"hsl(var(--sidebar-primary-foreground))\",\n          accent: \"hsl(var(--sidebar-accent))\",\n          \"accent-foreground\": \"hsl(var(--sidebar-accent-foreground))\",\n          border: \"hsl(var(--sidebar-border))\",\n          ring: \"hsl(var(--sidebar-ring))\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2787},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":533},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary shadow focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1012},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogTrigger,\n  DialogClose,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3849},"client/src/App.tsx":{"content":"import { Canvas } from \"@react-three/fiber\";\nimport { Suspense, useEffect, useState } from \"react\";\nimport { KeyboardControls } from \"@react-three/drei\";\nimport { useRecyclingGame } from \"./lib/stores/useRecyclingGame\";\nimport { useGameThemes } from \"./lib/stores/useGameThemes\";\nimport Game from \"./components/Game\";\nimport GameUI from \"./components/GameUI\";\nimport WasteCard from \"./components/WasteCard\";\nimport SoundManager from \"./components/SoundManager\";\nimport Shop from \"./components/Shop\";\nimport PauseButton from \"./components/PauseButton\";\nimport \"@fontsource/inter\";\n\n// WebGL detection utility\nfunction detectWebGL(): boolean {\n  try {\n    const canvas = document.createElement('canvas');\n    const gl = canvas.getContext('webgl') || canvas.getContext('experimental-webgl');\n    if (!gl) {\n      console.warn('WebGL not available, trying WebGL2...');\n      const gl2 = canvas.getContext('webgl2');\n      return !!gl2;\n    }\n    return true;\n  } catch (e) {\n    console.error('WebGL detection failed:', e);\n    return false;\n  }\n}\n\n// Define control keys for the recycling game\nenum Controls {\n  left = 'left',\n  right = 'right',\n  jump = 'jump',\n  restart = 'restart'\n}\n\nconst controls = [\n  { name: Controls.left, keys: [\"KeyA\", \"ArrowLeft\"] },\n  { name: Controls.right, keys: [\"KeyD\", \"ArrowRight\"] },\n  { name: Controls.jump, keys: [\"Space\"] },\n  { name: Controls.restart, keys: [\"KeyR\"] }\n];\n\n// Main App component\nfunction App() {\n  const { gameState } = useRecyclingGame();\n  const { getCurrentTheme } = useGameThemes();\n  const theme = getCurrentTheme();\n  const [showCanvas, setShowCanvas] = useState(false);\n  const [webglSupported, setWebglSupported] = useState(true);\n  const [canvasError, setCanvasError] = useState<string | null>(null);\n\n  // Check WebGL support and show the canvas once everything is loaded\n  useEffect(() => {\n    const isWebGLSupported = detectWebGL();\n    console.log('WebGL supported:', isWebGLSupported);\n    setWebglSupported(isWebGLSupported);\n    setShowCanvas(true);\n  }, []);\n\n  return (\n    <div style={{ \n      width: '100vw', \n      height: '100vh', \n      position: 'relative', \n      overflow: 'hidden',\n      background: theme.background\n    }}>\n      {showCanvas && webglSupported && !canvasError && (\n        <KeyboardControls map={controls}>\n          <Canvas\n            camera={{\n              position: [0, 3, 8],\n              fov: 60,\n              near: 0.1,\n              far: 1000\n            }}\n            gl={{\n              antialias: false,\n              powerPreference: \"default\",\n              alpha: false,\n              premultipliedAlpha: false,\n              preserveDrawingBuffer: false,\n              failIfMajorPerformanceCaveat: false,\n              stencil: false,\n              depth: true\n            }}\n            onCreated={({ gl, scene, camera }) => {\n              console.log('WebGL context created successfully');\n              console.log('Three.js renderer:', gl);\n              console.log('Scene objects:', scene.children.length);\n            }}\n            onError={(error) => {\n              console.error('Canvas creation error:', error);\n              setCanvasError('Canvas creation failed');\n            }}\n          >\n            <color attach=\"background\" args={[\"#87CEEB\"]} />\n            \n            <Suspense fallback={null}>\n              <Game />\n            </Suspense>\n          </Canvas>\n          \n          <WasteCard />\n          <GameUI />\n          <SoundManager />\n          <Shop />\n          <PauseButton />\n        </KeyboardControls>\n      )}\n      \n      {/* WebGL fallback UI - show when WebGL not supported or Canvas error occurs */}\n      {showCanvas && (!webglSupported || canvasError) && (\n        <KeyboardControls map={controls}>\n          {/* Fallback 2D game view */}\n          <div className=\"w-full h-full relative bg-gradient-to-b from-blue-300 to-green-300\">\n            {/* Simple 2D representation */}\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <div className=\"text-center bg-white bg-opacity-90 p-8 rounded-lg\">\n                <h2 className=\"text-2xl font-bold mb-4\">🌍 EcoRunner - Modo Compatibilidad 🌍</h2>\n                <p className=\"mb-4\">Tu navegador no soporta WebGL, pero el juego sigue funcionando!</p>\n                <p className=\"mb-2\">🎮 Los controles siguen activos:</p>\n                <div className=\"text-left inline-block\">\n                  <p>← → : Cambiar carril</p>\n                  <p>Espacio: Saltar y clasificar</p>\n                  <p>R: Reiniciar</p>\n                </div>\n                <div className=\"mt-4 text-sm text-gray-600\">\n                  {canvasError ? `Error: ${canvasError}` : 'WebGL no disponible'}\n                </div>\n              </div>\n            </div>\n          </div>\n          <WasteCard />\n          <GameUI />\n          <SoundManager />\n          <Shop />\n          <PauseButton />\n        </KeyboardControls>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","size_bytes":5029},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":768},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/interface.tsx":{"content":"import { useEffect } from \"react\";\nimport { useGame } from \"@/lib/stores/useGame\";\nimport { useAudio } from \"@/lib/stores/useAudio\";\nimport { Button } from \"./button\";\nimport { Card, CardContent, CardFooter, CardHeader, CardTitle } from \"./card\";\nimport { VolumeX, Volume2, RotateCw, Trophy } from \"lucide-react\";\n\nexport function Interface() {\n  const restart = useGame((state) => state.restart);\n  const phase = useGame((state) => state.phase);\n  const { isMuted, toggleMute } = useAudio();\n\n  // Handle clicks on the interface in the ready phase to start the game\n  useEffect(() => {\n    if (phase === \"ready\") {\n      const handleClick = () => {\n        const activeElement = document.activeElement;\n        if (activeElement && 'blur' in activeElement) {\n          (activeElement as HTMLElement).blur();\n        }\n        const event = new KeyboardEvent(\"keydown\", { code: \"Space\" });\n        window.dispatchEvent(event);\n      };\n\n      window.addEventListener(\"click\", handleClick);\n      return () => window.removeEventListener(\"click\", handleClick);\n    }\n  }, [phase]);\n\n  return (\n    <>\n      {/* Top-right corner UI controls */}\n      <div className=\"fixed top-4 right-4 flex gap-2 z-10\">\n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={toggleMute}\n          title={isMuted ? \"Unmute\" : \"Mute\"}\n        >\n          {isMuted ? <VolumeX size={18} /> : <Volume2 size={18} />}\n        </Button>\n        \n        <Button\n          variant=\"outline\"\n          size=\"icon\"\n          onClick={restart}\n          title=\"Restart Game\"\n        >\n          <RotateCw size={18} />\n        </Button>\n      </div>\n      \n      {/* Game completion overlay */}\n      {phase === \"ended\" && (\n        <div className=\"fixed inset-0 flex items-center justify-center z-20 bg-black/30\">\n          <Card className=\"w-full max-w-md mx-4 shadow-lg\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center justify-center gap-2\">\n                <Trophy className=\"text-yellow-500\" />\n                Level Complete!\n              </CardTitle>\n            </CardHeader>\n            \n            <CardContent>\n              <p className=\"text-center text-muted-foreground\">\n                Congratulations! You successfully navigated the course.\n              </p>\n            </CardContent>\n            \n            <CardFooter className=\"flex justify-center\">\n              <Button onClick={restart} className=\"w-full\">\n                Play Again\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      )}\n      \n      {/* Instructions panel */}\n      <div className=\"fixed bottom-4 left-4 z-10\">\n        <Card className=\"w-auto max-w-xs bg-background/80 backdrop-blur-sm\">\n          <CardContent className=\"p-4\">\n            <h3 className=\"font-medium mb-2\">Controls:</h3>\n            <ul className=\"text-sm space-y-1 text-muted-foreground\">\n              <li>WASD or Arrow Keys: Move the ball</li>\n              <li>Space: Jump</li>\n              <li>R: Restart game</li>\n              <li>M: Toggle sound</li>\n            </ul>\n          </CardContent>\n        </Card>\n      </div>\n    </>\n  );\n}\n","size_bytes":3180},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: cn(\n          \"relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md\",\n          props.mode === \"range\"\n            ? \"[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md\"\n            : \"[&:has([aria-selected])]:rounded-md\"\n        ),\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-8 w-8 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_start: \"day-range-start\",\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2935},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md\",\n        \"data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7480},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    width: 100vw;\n    height: 100vh;\n  }\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n}\n\ncanvas {\n  width: 100% !important;\n  height: 100% !important;\n  touch-action: none;\n}","size_bytes":427},"client/src/components/ui/sonner.tsx":{"content":"\"use client\"\n\nimport { useTheme } from \"next-themes\"\nimport { Toaster as Sonner } from \"sonner\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  const { theme = \"system\" } = useTheme()\n\n  return (\n    <Sonner\n      theme={theme as ToasterProps[\"theme\"]}\n      className=\"toaster group\"\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n","size_bytes":894},"client/src/components/Environment.tsx":{"content":"import { useTexture } from \"@react-three/drei\";\nimport { useMemo } from \"react\";\nimport * as THREE from \"three\";\n\nexport default function Environment() {\n  const asphaltTexture = useTexture(\"/textures/asphalt.png\");\n  \n  // Pre-calculate truck positions\n  const truckPositions = useMemo(() => [\n    { x: -8, z: -10, color: '#FF6B6B' },\n    { x: 8, z: -15, color: '#4ECDC4' },\n    { x: -6, z: -25, color: '#95E1D3' },\n    { x: 10, z: -20, color: '#F8E71C' }\n  ], []);\n\n  // Pre-calculate building positions\n  const buildingPositions = useMemo(() => [\n    { x: -12, z: -5, height: 3, color: '#8B7355' },\n    { x: -14, z: -12, height: 4, color: '#A0522D' },\n    { x: 12, z: -8, height: 2.5, color: '#696969' },\n    { x: 15, z: -18, height: 3.5, color: '#778899' }\n  ], []);\n\n  return (\n    <group>\n      {/* Street/Road */}\n      <mesh position={[0, -0.5, -15]} receiveShadow>\n        <boxGeometry args={[20, 0.1, 60]} />\n        <meshLambertMaterial map={asphaltTexture} />\n      </mesh>\n\n      {/* Sidewalks */}\n      <mesh position={[-10, -0.4, -15]} receiveShadow>\n        <boxGeometry args={[4, 0.1, 60]} />\n        <meshLambertMaterial color=\"#CCCCCC\" />\n      </mesh>\n      \n      <mesh position={[10, -0.4, -15]} receiveShadow>\n        <boxGeometry args={[4, 0.1, 60]} />\n        <meshLambertMaterial color=\"#CCCCCC\" />\n      </mesh>\n\n      {/* Lane delimiter lines for 4 lanes */}\n      {[-2, 0, 2].map((x, index) => (\n        <mesh key={index} position={[x, -0.35, -15]} receiveShadow>\n          <boxGeometry args={[0.1, 0.05, 60]} />\n          <meshLambertMaterial color=\"#FFFFFF\" />\n        </mesh>\n      ))}\n\n      {/* Game frame/border */}\n      {/* Top border */}\n      <mesh position={[0, -0.35, 15]} receiveShadow>\n        <boxGeometry args={[8, 0.05, 0.2]} />\n        <meshLambertMaterial color=\"#FFFFFF\" />\n      </mesh>\n      \n      {/* Bottom border */}\n      <mesh position={[0, -0.35, -45]} receiveShadow>\n        <boxGeometry args={[8, 0.05, 0.2]} />\n        <meshLambertMaterial color=\"#FFFFFF\" />\n      </mesh>\n      \n      {/* Left border */}\n      <mesh position={[-4, -0.35, -15]} receiveShadow>\n        <boxGeometry args={[0.2, 0.05, 60]} />\n        <meshLambertMaterial color=\"#FFFFFF\" />\n      </mesh>\n      \n      {/* Right border */}\n      <mesh position={[4, -0.35, -15]} receiveShadow>\n        <boxGeometry args={[0.2, 0.05, 60]} />\n        <meshLambertMaterial color=\"#FFFFFF\" />\n      </mesh>\n\n      {/* Garbage trucks as background decoration */}\n      {truckPositions.map((truck, index) => (\n        <group key={index} position={[truck.x, 0.5, truck.z]}>\n          {/* Truck body */}\n          <mesh castShadow>\n            <boxGeometry args={[2, 1.5, 4]} />\n            <meshLambertMaterial color={truck.color} />\n          </mesh>\n          \n          {/* Truck cab */}\n          <mesh position={[0, 0.5, 1.5]} castShadow>\n            <boxGeometry args={[1.8, 1, 1]} />\n            <meshLambertMaterial color={new THREE.Color(truck.color).multiplyScalar(0.8)} />\n          </mesh>\n          \n          {/* Wheels */}\n          {[-0.8, 0.8].map((wheelX, wheelIndex) => (\n            <mesh key={wheelIndex} position={[wheelX, -0.6, 1]} castShadow>\n              <cylinderGeometry args={[0.3, 0.3, 0.2, 8]} />\n              <meshLambertMaterial color=\"#333333\" />\n            </mesh>\n          ))}\n          \n          {[-0.8, 0.8].map((wheelX, wheelIndex) => (\n            <mesh key={`rear-${wheelIndex}`} position={[wheelX, -0.6, -1]} castShadow>\n              <cylinderGeometry args={[0.3, 0.3, 0.2, 8]} />\n              <meshLambertMaterial color=\"#333333\" />\n            </mesh>\n          ))}\n        </group>\n      ))}\n\n      {/* Buildings */}\n      {buildingPositions.map((building, index) => (\n        <mesh \n          key={index} \n          position={[building.x, building.height / 2, building.z]} \n          castShadow\n        >\n          <boxGeometry args={[3, building.height, 4]} />\n          <meshLambertMaterial color={building.color} />\n        </mesh>\n      ))}\n\n      {/* Scattered trash on the ground for atmosphere */}\n      {Array.from({ length: 15 }, (_, i) => {\n        const x = (Math.random() - 0.5) * 18;\n        const z = -Math.random() * 40 - 5;\n        const trashColors = ['#F8E71C', '#4CAF50', '#8D6E63', '#2196F3']; // Yellow, Green, Brown, Blue\n        const color = trashColors[Math.floor(Math.random() * trashColors.length)];\n        \n        return (\n          <mesh key={i} position={[x, -0.3, z]} castShadow>\n            <boxGeometry args={[0.2, 0.1, 0.2]} />\n            <meshLambertMaterial color={color} />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n}\n","size_bytes":4643},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-xl border bg-card text-card-foreground shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"font-semibold leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1828},"client/src/components/Lights.tsx":{"content":"import { useGameThemes } from '../lib/stores/useGameThemes';\n\nexport default function Lights() {\n  const { getCurrentTheme } = useGameThemes();\n  const theme = getCurrentTheme();\n  const lighting = theme.lighting;\n\n  return (\n    <>\n      {/* Ambient light for general illumination */}\n      <ambientLight intensity={lighting.ambientIntensity} color={lighting.ambientColor} />\n      \n      {/* Main directional light (sun/moon) */}\n      <directionalLight\n        position={[5, 10, 5]}\n        intensity={lighting.sunIntensity}\n        castShadow\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-camera-far={50}\n        shadow-camera-left={-20}\n        shadow-camera-right={20}\n        shadow-camera-top={20}\n        shadow-camera-bottom={-20}\n        color={lighting.sunColor}\n      />\n      \n      {/* Fill light from opposite side */}\n      <directionalLight\n        position={[-5, 5, -5]}\n        intensity={lighting.fillIntensity}\n        color={lighting.fillColor}\n      />\n      \n      {/* Point light for additional atmosphere */}\n      <pointLight\n        position={[0, 5, 0]}\n        intensity={0.5}\n        distance={20}\n        color=\"#FFA500\"\n      />\n    </>\n  );\n}\n","size_bytes":1219},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Minus } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-9 w-9 items-center justify-center border-y border-r border-input text-sm shadow-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-1 ring-ring\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Minus />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2143},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1140},"client/src/lib/stores/useRecyclingGame.tsx":{"content":"import { create } from \"zustand\";\nimport { subscribeWithSelector } from \"zustand/middleware\";\nimport { TrashObstacle, GameState, TrashType, Vector3, TutorialStep } from \"../../types/game\";\nimport { WasteItem, getRandomWasteItem } from \"../../data/wasteItems\";\n\n// localStorage functions for coin persistence\nconst COINS_STORAGE_KEY = 'ecorunner_coins';\nconst HIGH_SCORE_STORAGE_KEY = 'ecorunner_highscore';\n\nfunction saveCoinsToStorage(coins: number) {\n  try {\n    localStorage.setItem(COINS_STORAGE_KEY, coins.toString());\n  } catch (error) {\n    console.warn('Failed to save coins to localStorage:', error);\n  }\n}\n\nfunction loadCoinsFromStorage(): number {\n  try {\n    const saved = localStorage.getItem(COINS_STORAGE_KEY);\n    return saved ? parseInt(saved, 10) || 10 : 10; // Default to 10 coins\n  } catch (error) {\n    console.warn('Failed to load coins from localStorage:', error);\n    return 10;\n  }\n}\n\nfunction saveHighScoreToStorage(highScore: number) {\n  try {\n    localStorage.setItem(HIGH_SCORE_STORAGE_KEY, highScore.toString());\n  } catch (error) {\n    console.warn('Failed to save high score to localStorage:', error);\n  }\n}\n\nfunction loadHighScoreFromStorage(): number {\n  try {\n    const saved = localStorage.getItem(HIGH_SCORE_STORAGE_KEY);\n    return saved ? parseInt(saved, 10) || 0 : 0; // Default to 0 high score\n  } catch (error) {\n    console.warn('Failed to load high score from localStorage:', error);\n    return 0;\n  }\n}\n\ninterface RecyclingGameState {\n  // Game state\n  gameState: GameState;\n  score: number;\n  lives: number;\n  coins: number;\n  highScore: number;\n  gameSpeed: number;\n  combo: number;\n  \n  // Tutorial state\n  tutorialStep: number;\n  currentTutorialStep: TutorialStep | null;\n  tutorialCompleted: boolean;\n  \n  // Player state\n  playerPosition: Vector3;\n  playerLane: number; // 0 = glass (left), 1 = organic, 2 = paper, 3 = plastic (right)\n  isJumping: boolean;\n  jumpStartTime: number;\n  runningSpeed: number;\n  distanceTraveled: number;\n  lastSpawnDistance: number;\n  \n  // Game objects\n  obstacles: TrashObstacle[];\n  nextObstacleId: number;\n  currentWasteItem: WasteItem | null;\n  \n  // UI feedback\n  classificationMessage: string | null;\n  messageTimeout: NodeJS.Timeout | null;\n  \n  // Actions\n  startGame: () => void;\n  startTutorial: () => void;\n  restartGame: () => void;\n  endGame: () => void;\n  setPlayerLane: (lane: number) => void;\n  jump: () => void;\n  spawnObstacle: () => void;\n  shouldSpawnObstacle: () => boolean;\n  removeObstacle: (id: number) => void;\n  updateGame: (delta: number) => void;\n  classifyTrash: (obstacle: TrashObstacle) => void;\n  nextTutorialStep: () => void;\n  completeTutorial: () => void;\n  generateNewWasteItem: () => void;\n  classifyCurrentWaste: () => void;\n  revivePlayer: () => void;\n  canRevive: () => boolean;\n  setCoins: (coins: number) => void;\n  togglePause: () => void;\n}\n\nconst LANE_POSITIONS = [-3, -1, 1, 3]; // x positions for 4 lanes: glass, organic, paper, plastic\nconst JUMP_DURATION = 0.8; // seconds\nconst JUMP_HEIGHT = 2;\n\n// Distance-based spawning constants\nconst SPAWN_DISTANCE_PLAYING = 8; // Spawn obstacle every 8 units in playing mode\nconst SPAWN_DISTANCE_TUTORIAL = 12; // Spawn obstacle every 12 units in tutorial mode\nconst MAX_OBSTACLES_PLAYING = 15; // Maximum obstacles in playing mode\nconst MAX_OBSTACLES_TUTORIAL = 8; // Maximum obstacles in tutorial mode\n\nconst TUTORIAL_STEPS: TutorialStep[] = [\n  {\n    id: 'welcome',\n    title: '¡Bienvenido a EcoRunner!',\n    description: 'Aprenderás a clasificar basura para ayudar al medio ambiente.',\n    instruction: 'Lee la información y haz clic en \"Continuar\"',\n  },\n  {\n    id: 'movement',\n    title: 'Movimiento por Carriles',\n    description: 'Usa las teclas de flecha o A/D para moverte entre carriles.',\n    instruction: 'Prueba mover tu personaje a la izquierda',\n    targetAction: 'move-left',\n    completionMessage: '¡Bien! Ahora prueba mover a la derecha',\n  },\n  {\n    id: 'jumping',\n    title: 'Saltar y Clasificar',\n    description: 'Presiona ESPACIO para saltar sobre obstáculos y clasificar basura.',\n    instruction: 'Presiona ESPACIO para saltar',\n    targetAction: 'jump',\n    completionMessage: '¡Excelente! El salto también sirve para clasificar basura.',\n  },\n  {\n    id: 'trash-types',\n    title: 'Tipos de Basura y Colores',\n    description: 'Hay 4 tipos de basura: Plástico (amarillo), Vidrio (verde), Orgánico (marrón), y Papel (azul).',\n    instruction: 'Memoriza los colores correctos para cada tipo de basura',\n  },\n  {\n    id: 'classification',\n    title: 'Clasificación Correcta',\n    description: 'Muévete al carril del cubo correcto y salta para clasificar. De izquierda a derecha: Vidrio=verde, Orgánico=marrón, Papel=azul, Plástico=amarillo.',\n    instruction: 'Clasifica correctamente la basura que aparece',\n    targetAction: 'classify-correct',\n    completionMessage: '¡Perfecto! Has aprendido a reciclar correctamente.',\n  }\n];\n\nexport const useRecyclingGame = create<RecyclingGameState>()(\n  subscribeWithSelector((set, get) => ({\n    // Initial state\n    gameState: 'menu',\n    score: 0,\n    lives: 3,\n    coins: loadCoinsFromStorage(),\n    highScore: loadHighScoreFromStorage(),\n    gameSpeed: 8,\n    combo: 1,\n    \n    // Tutorial state\n    tutorialStep: 0,\n    currentTutorialStep: null,\n    tutorialCompleted: false,\n    \n    playerPosition: { x: 0, y: 0.5, z: 0 },\n    playerLane: 1, // Start in second lane (organic)\n    isJumping: false,\n    jumpStartTime: 0,\n    runningSpeed: 5,\n    distanceTraveled: 0,\n    lastSpawnDistance: 0,\n    \n    obstacles: [],\n    nextObstacleId: 1,\n    currentWasteItem: null,\n    \n    classificationMessage: null,\n    messageTimeout: null,\n    \n    startGame: () => {\n      const savedCoins = loadCoinsFromStorage();\n      set({\n        gameState: 'playing',\n        score: 0,\n        lives: 3,\n        coins: savedCoins,\n        obstacles: [],\n        playerLane: 1,\n        playerPosition: { x: 0, y: 0.5, z: 0 },\n        isJumping: false,\n        combo: 1,\n        distanceTraveled: 0,\n        lastSpawnDistance: 0,\n        currentWasteItem: getRandomWasteItem()\n      });\n    },\n    \n    startTutorial: () => {\n      const savedCoins = loadCoinsFromStorage();\n      set({\n        gameState: 'tutorial',\n        score: 0,\n        lives: 3,\n        coins: savedCoins,\n        obstacles: [],\n        playerLane: 1,\n        playerPosition: { x: 0, y: 0.5, z: 0 },\n        isJumping: false,\n        combo: 1,\n        distanceTraveled: 0,\n        lastSpawnDistance: 0,\n        tutorialStep: 0,\n        currentTutorialStep: TUTORIAL_STEPS[0],\n        currentWasteItem: getRandomWasteItem()\n      });\n    },\n    \n    restartGame: () => {\n      const { messageTimeout } = get();\n      if (messageTimeout) clearTimeout(messageTimeout);\n      const savedCoins = loadCoinsFromStorage();\n      \n      set({\n        gameState: 'menu',\n        score: 0,\n        lives: 3,\n        coins: savedCoins,\n        obstacles: [],\n        playerLane: 1,\n        playerPosition: { x: 0, y: 0.5, z: 0 },\n        isJumping: false,\n        classificationMessage: null,\n        messageTimeout: null,\n        combo: 1,\n        distanceTraveled: 0,\n        lastSpawnDistance: 0,\n        currentWasteItem: null\n      });\n    },\n    \n    endGame: () => {\n      const { score, highScore } = get();\n      let newHighScore = highScore;\n      \n      // Update high score if current score is higher\n      if (score > highScore) {\n        newHighScore = score;\n        saveHighScoreToStorage(newHighScore);\n      }\n      \n      set({ \n        gameState: 'gameOver',\n        highScore: newHighScore\n      });\n    },\n    \n    setPlayerLane: (lane: number) => {\n      const clampedLane = Math.max(0, Math.min(3, lane));\n      \n      set((state) => ({\n        playerLane: clampedLane,\n        playerPosition: {\n          ...state.playerPosition,\n          x: LANE_POSITIONS[clampedLane]\n        }\n      }));\n    },\n    \n    jump: () => {\n      const currentTime = Date.now() / 1000;\n      \n      set({\n        isJumping: true,\n        jumpStartTime: currentTime\n      });\n      \n      // Classify current waste item when jumping\n      get().classifyCurrentWaste();\n    },\n    \n    spawnObstacle: () => {\n      const { nextObstacleId, playerPosition } = get();\n      const trashTypes: TrashType[] = ['plastic', 'glass', 'organic', 'paper'];\n      const randomType = trashTypes[Math.floor(Math.random() * trashTypes.length)];\n      const randomLane = Math.floor(Math.random() * 4); // Now using 4 lanes\n      \n      // Spawn obstacles ahead of the running player (10-20 units ahead)\n      let spawnDistance = 10 + Math.random() * 10; // Between 10 and 20 units ahead\n      let obstacleZ = playerPosition.z + spawnDistance;\n      \n      // Prevent spawning too close to container positions (every 40 units)\n      const CONTAINER_INTERVAL = 40;\n      const CONTAINER_BUFFER = 5; // Don't spawn within 5 units of containers\n      \n      // Find if obstacleZ is too close to any container position\n      const nearestContainerStation = Math.round(obstacleZ / CONTAINER_INTERVAL) * CONTAINER_INTERVAL;\n      const distanceToNearestContainer = Math.abs(obstacleZ - nearestContainerStation);\n      \n      // If too close to a container, adjust the position\n      if (distanceToNearestContainer < CONTAINER_BUFFER) {\n        // Move obstacle to midpoint between container stations\n        const midpoint = nearestContainerStation + (CONTAINER_INTERVAL / 2);\n        obstacleZ = midpoint;\n      }\n      \n      const obstacle: TrashObstacle = {\n        id: nextObstacleId,\n        trashType: randomType,\n        position: {\n          x: LANE_POSITIONS[randomLane],\n          y: 0.3,\n          z: obstacleZ\n        },\n        lane: randomLane\n      };\n      \n      set((state) => ({\n        obstacles: [...state.obstacles, obstacle],\n        nextObstacleId: nextObstacleId + 1\n      }));\n    },\n    \n    shouldSpawnObstacle: () => {\n      const { gameState, obstacles, distanceTraveled, lastSpawnDistance } = get();\n      \n      const maxObstacles = gameState === 'tutorial' ? MAX_OBSTACLES_TUTORIAL : MAX_OBSTACLES_PLAYING;\n      const spawnDistance = gameState === 'tutorial' ? SPAWN_DISTANCE_TUTORIAL : SPAWN_DISTANCE_PLAYING;\n      \n      // Check if we've reached max obstacles\n      if (obstacles.length >= maxObstacles) {\n        return false;\n      }\n      \n      // Check if enough distance has passed since last spawn\n      const distanceSinceLastSpawn = distanceTraveled - lastSpawnDistance;\n      \n      if (distanceSinceLastSpawn >= spawnDistance) {\n        // Update last spawn distance and spawn obstacle\n        set({ lastSpawnDistance: distanceTraveled });\n        return true;\n      }\n      \n      return false;\n    },\n    \n    removeObstacle: (id: number) => {\n      set((state) => ({\n        obstacles: state.obstacles.filter(obs => obs.id !== id)\n      }));\n    },\n    \n    updateGame: (delta: number) => {\n      const state = get();\n      \n      // Move player forward continuously\n      const forwardMovement = state.runningSpeed * delta;\n      const newDistanceTraveled = state.distanceTraveled + forwardMovement;\n      const newPlayerZ = state.playerPosition.z + forwardMovement;\n      \n      // Update jump animation\n      let newPlayerY = state.playerPosition.y;\n      let newIsJumping = state.isJumping;\n      \n      if (state.isJumping) {\n        const currentTime = Date.now() / 1000;\n        const jumpProgress = (currentTime - state.jumpStartTime) / JUMP_DURATION;\n        \n        if (jumpProgress >= 1) {\n          // Landing\n          newPlayerY = 0.5;\n          newIsJumping = false;\n        } else {\n          // Jump arc (parabolic)\n          newPlayerY = 0.5 + JUMP_HEIGHT * Math.sin(jumpProgress * Math.PI);\n        }\n      }\n      \n      // Prepare state updates to batch\n      let newLives = state.lives;\n      let newCombo = state.combo;\n      let newObstacles = state.obstacles;\n      const newRunningSpeed = Math.min(state.runningSpeed + (delta * 0.2), 12);\n      \n      // Auto-jump functionality: Check if player is approaching containers and should auto-jump\n      if (!newIsJumping) {\n        // Container spawn interval is 40 units\n        const CONTAINER_INTERVAL = 40;\n        const AUTO_JUMP_DISTANCE = 3; // Auto-jump when 3 units away from containers\n        \n        // Find the next container station ahead\n        const nextContainerZ = Math.ceil(newPlayerZ / CONTAINER_INTERVAL) * CONTAINER_INTERVAL;\n        const distanceToContainer = nextContainerZ - newPlayerZ;\n        \n        // If player is close to containers and hasn't jumped, auto-jump\n        if (distanceToContainer <= AUTO_JUMP_DISTANCE && distanceToContainer > 0) {\n          // Trigger auto-jump\n          const currentTime = Date.now() / 1000;\n          newIsJumping = true;\n          \n          set({\n            isJumping: true,\n            jumpStartTime: currentTime\n          });\n          \n          // Classify current waste item during auto-jump - this will handle lives separately\n          setTimeout(() => get().classifyCurrentWaste(), 10);\n        }\n      }\n      \n      // Check for collisions with obstacles\n      if (!newIsJumping) {\n        for (const obstacle of newObstacles) {\n          // Check if player is close enough to the obstacle for collision\n          const horizontalDistance = Math.abs(obstacle.position.x - LANE_POSITIONS[state.playerLane]);\n          const verticalDistance = Math.abs(obstacle.position.z - newPlayerZ);\n          \n          // Collision detected: same lane and close in distance\n          if (horizontalDistance < 0.5 && verticalDistance < 1.0) {\n            // Player collided with obstacle without jumping/classifying - lose a life\n            newLives = Math.max(0, newLives - 1);\n            newCombo = 1; // Reset combo\n            \n            // Remove the obstacle\n            newObstacles = newObstacles.filter(obs => obs.id !== obstacle.id);\n            \n            // Show collision message\n            const { messageTimeout } = get();\n            if (messageTimeout) clearTimeout(messageTimeout);\n            \n            const timeout = setTimeout(() => {\n              set({ classificationMessage: null, messageTimeout: null });\n            }, 2000);\n            \n            set({\n              classificationMessage: '¡Chocaste con la basura! -1 vida',\n              messageTimeout: timeout\n            });\n            \n            // Check if game over\n            if (newLives <= 0) {\n              setTimeout(() => get().endGame(), 100); // Small delay to show message\n            }\n            \n            break; // Only handle one collision per frame\n          }\n        }\n      }\n      \n      // Clean up obstacles that are behind the player\n      newObstacles = newObstacles.filter(obs => obs.position.z > newPlayerZ - 5);\n      \n      // Batch all state updates into single set() call\n      // Note: lives are updated separately by classifyCurrentWaste, so we only update if there was a collision\n      const updateObject: any = {\n        distanceTraveled: newDistanceTraveled,\n        playerPosition: {\n          x: LANE_POSITIONS[state.playerLane],\n          y: newPlayerY,\n          z: newPlayerZ\n        },\n        isJumping: newIsJumping,\n        combo: newCombo,\n        obstacles: newObstacles,\n        runningSpeed: newRunningSpeed\n      };\n      \n      // Only update lives if they changed due to collision (not classification)\n      if (newLives !== state.lives) {\n        updateObject.lives = newLives;\n      }\n      \n      set(updateObject);\n    },\n    \n    classifyTrash: (obstacle: TrashObstacle) => {\n      const { playerLane, combo } = get();\n      let isCorrect = false;\n      let message = \"\";\n      \n      // Determine correct classification based on player lane and trash type\n      switch (playerLane) {\n        case 0: // Lane 0 - Glass (green)\n          isCorrect = obstacle.trashType === 'glass';\n          break;\n        case 1: // Lane 1 - Organic (brown)\n          isCorrect = obstacle.trashType === 'organic';\n          break;\n        case 2: // Lane 2 - Paper (blue)\n          isCorrect = obstacle.trashType === 'paper';\n          break;\n        case 3: // Lane 3 - Plastic (yellow)\n          isCorrect = obstacle.trashType === 'plastic';\n          break;\n      }\n      \n      if (isCorrect) {\n        const points = 10 * combo;\n        const coinReward = 10;\n        message = `¡Correcto! +${points} puntos, +${coinReward} monedas`;\n        \n        set((state) => ({\n          score: state.score + points,\n          coins: state.coins + coinReward,\n          combo: Math.min(state.combo + 1, 5) // Max combo of 5\n        }));\n      } else {\n        const lifePenalty = 1;\n        message = `¡Incorrecto! Era ${obstacle.trashType}, -${lifePenalty} vida`;\n        \n        let newLives = 0;\n        set((state) => {\n          newLives = Math.max(0, state.lives - lifePenalty);\n          return {\n            combo: 1, // Reset combo\n            lives: newLives\n          };\n        });\n        \n        // Check if game over immediately after setting new lives\n        if (newLives <= 0) {\n          setTimeout(() => get().endGame(), 100);\n        }\n      }\n      \n      // Remove the obstacle\n      get().removeObstacle(obstacle.id);\n      \n      // Show message\n      const { messageTimeout } = get();\n      if (messageTimeout) clearTimeout(messageTimeout);\n      \n      const timeout = setTimeout(() => {\n        set({ classificationMessage: null, messageTimeout: null });\n      }, 2000);\n      \n      set({\n        classificationMessage: message,\n        messageTimeout: timeout\n      });\n    },\n    \n    nextTutorialStep: () => {\n      const { tutorialStep } = get();\n      const nextStep = tutorialStep + 1;\n      \n      if (nextStep >= TUTORIAL_STEPS.length) {\n        get().completeTutorial();\n        return;\n      }\n      \n      set({\n        tutorialStep: nextStep,\n        currentTutorialStep: TUTORIAL_STEPS[nextStep]\n      });\n    },\n    \n    completeTutorial: () => {\n      set({\n        tutorialCompleted: true,\n        gameState: 'menu',\n        currentTutorialStep: null\n      });\n      \n      // Show completion message\n      const timeout = setTimeout(() => {\n        set({ classificationMessage: null, messageTimeout: null });\n      }, 3000);\n      \n      set({\n        classificationMessage: '¡Tutorial completado! Ahora puedes jugar el juego completo.',\n        messageTimeout: timeout\n      });\n    },\n\n    generateNewWasteItem: () => {\n      const newWasteItem = getRandomWasteItem();\n      set({ currentWasteItem: newWasteItem });\n    },\n\n    classifyCurrentWaste: () => {\n      const { currentWasteItem, playerLane, combo } = get();\n      \n      if (!currentWasteItem) return;\n      \n      let isCorrect = false;\n      let message = \"\";\n      \n      // Determine correct classification based on player lane and waste type\n      switch (playerLane) {\n        case 0: // Lane 0 - Glass (green)\n          isCorrect = currentWasteItem.correctContainer === 'glass';\n          break;\n        case 1: // Lane 1 - Organic (brown)\n          isCorrect = currentWasteItem.correctContainer === 'organic';\n          break;\n        case 2: // Lane 2 - Paper (blue)\n          isCorrect = currentWasteItem.correctContainer === 'paper';\n          break;\n        case 3: // Lane 3 - Plastic (yellow)\n          isCorrect = currentWasteItem.correctContainer === 'plastic';\n          break;\n      }\n      \n      if (isCorrect) {\n        const points = 10 * combo;\n        const coinReward = 10;\n        message = `¡Correcto! ${currentWasteItem.name} va en ${currentWasteItem.correctContainer}. +${points} puntos, +${coinReward} monedas`;\n        \n        set((state) => {\n          const newCoins = state.coins + coinReward;\n          saveCoinsToStorage(newCoins);\n          return {\n            score: state.score + points,\n            coins: newCoins,\n            combo: Math.min(state.combo + 1, 5) // Max combo of 5\n          };\n        });\n      } else {\n        const lifePenalty = 1;\n        message = `¡Incorrecto! ${currentWasteItem.name} va en ${currentWasteItem.correctContainer}, no aquí. -${lifePenalty} vida`;\n        \n        let newLives = 0;\n        set((state) => {\n          newLives = Math.max(0, state.lives - lifePenalty);\n          return {\n            combo: 1, // Reset combo\n            lives: newLives\n          };\n        });\n        \n        // Check if game over immediately after setting new lives\n        if (newLives <= 0) {\n          setTimeout(() => get().endGame(), 100);\n        }\n      }\n      \n      // Generate new waste item for next classification\n      get().generateNewWasteItem();\n      \n      // Show feedback message\n      const timeout = setTimeout(() => {\n        set({ classificationMessage: null, messageTimeout: null });\n      }, 2000);\n      \n      set({\n        classificationMessage: message,\n        messageTimeout: timeout\n      });\n      \n      // Save coins to localStorage whenever they change\n      const { coins } = get();\n      saveCoinsToStorage(coins);\n    },\n\n    revivePlayer: () => {\n      const { coins } = get();\n      const REVIVAL_COST = 150;\n      \n      if (coins >= REVIVAL_COST) {\n        const newCoins = coins - REVIVAL_COST;\n        set({\n          gameState: 'playing',\n          lives: 3,\n          coins: newCoins,\n          currentWasteItem: getRandomWasteItem()\n        });\n        \n        // Save updated coins to localStorage\n        saveCoinsToStorage(newCoins);\n      }\n    },\n\n    canRevive: () => {\n      const { coins } = get();\n      return coins >= 150;\n    },\n\n    setCoins: (coins: number) => {\n      set({ coins });\n      saveCoinsToStorage(coins);\n    },\n\n    togglePause: () => {\n      const { gameState } = get();\n      if (gameState === 'paused') {\n        set({ gameState: 'playing' });\n      } else if (gameState === 'playing') {\n        set({ gameState: 'paused' });\n      }\n    }\n  }))\n);\n","size_bytes":21945},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground shadow hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-9 px-4 py-2\",\n        sm: \"h-8 rounded-md px-3 text-xs\",\n        lg: \"h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1902},"client/src/components/WastePreviewPanel.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\nimport { TrashType } from \"../types/game\";\n\ninterface WasteItemIconProps {\n  type: TrashType;\n  size?: 'small' | 'medium' | 'large';\n}\n\nfunction WasteItemIcon({ type, size = 'large' }: WasteItemIconProps) {\n  const sizeClasses = {\n    small: 'w-8 h-8',\n    medium: 'w-12 h-12', \n    large: 'w-16 h-16'\n  };\n\n  const iconSize = sizeClasses[size];\n\n  switch (type) {\n    case 'plastic':\n      return (\n        <div className={`${iconSize} relative flex items-center justify-center`}>\n          {/* Plastic bottle with high detail */}\n          <svg viewBox=\"0 0 64 64\" className=\"w-full h-full drop-shadow-lg\">\n            {/* Bottle body */}\n            <path d=\"M18 20 L18 52 Q18 58 24 58 L40 58 Q46 58 46 52 L46 20 Z\" \n                  fill=\"#FFD700\" stroke=\"#FFA000\" strokeWidth=\"2\"/>\n            {/* Bottle neck */}\n            <path d=\"M26 8 L26 20 L38 20 L38 8 Q38 4 34 4 L30 4 Q26 4 26 8 Z\" \n                  fill=\"#FFD700\" stroke=\"#FFA000\" strokeWidth=\"2\"/>\n            {/* Cap */}\n            <rect x=\"24\" y=\"2\" width=\"16\" height=\"6\" rx=\"3\" \n                  fill=\"#FF6B35\" stroke=\"#E55100\" strokeWidth=\"1.5\"/>\n            {/* Label wrap */}\n            <rect x=\"20\" y=\"28\" width=\"24\" height=\"16\" rx=\"2\" \n                  fill=\"#FFFFFF\" fillOpacity=\"0.8\" stroke=\"#CCC\" strokeWidth=\"1\"/>\n            {/* Recycling symbol */}\n            <circle cx=\"32\" cy=\"36\" r=\"6\" fill=\"none\" stroke=\"#4CAF50\" strokeWidth=\"2\"/>\n            <path d=\"M28 33 L32 29 L36 33\" fill=\"none\" stroke=\"#4CAF50\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n            <path d=\"M28 39 L32 43 L36 39\" fill=\"none\" stroke=\"#4CAF50\" strokeWidth=\"2\" strokeLinecap=\"round\"/>\n            {/* Bottle ridges */}\n            <line x1=\"20\" y1=\"24\" x2=\"44\" y2=\"24\" stroke=\"#FFA000\" strokeWidth=\"1\"/>\n            <line x1=\"20\" y1=\"50\" x2=\"44\" y2=\"50\" stroke=\"#FFA000\" strokeWidth=\"1\"/>\n          </svg>\n        </div>\n      );\n\n    case 'glass':\n      return (\n        <div className={`${iconSize} relative flex items-center justify-center`}>\n          {/* Glass bottle with high detail */}\n          <svg viewBox=\"0 0 64 64\" className=\"w-full h-full drop-shadow-lg\">\n            {/* Bottle body - wine bottle shape */}\n            <path d=\"M20 25 L20 52 Q20 58 26 58 L38 58 Q44 58 44 52 L44 25 Q44 22 42 20 L40 18 L40 12 Q40 8 36 8 L28 8 Q24 8 24 12 L24 18 L22 20 Q20 22 20 25 Z\" \n                  fill=\"#2E7D32\" stroke=\"#1B5E20\" strokeWidth=\"2\" fillOpacity=\"0.9\"/>\n            {/* Bottle neck */}\n            <rect x=\"28\" y=\"4\" width=\"8\" height=\"16\" \n                  fill=\"#2E7D32\" stroke=\"#1B5E20\" strokeWidth=\"2\" fillOpacity=\"0.9\"/>\n            {/* Cork/cap */}\n            <rect x=\"26\" y=\"2\" width=\"12\" height=\"4\" rx=\"2\" \n                  fill=\"#8D6E63\" stroke=\"#5D4037\" strokeWidth=\"1.5\"/>\n            {/* Glass highlight */}\n            <path d=\"M26 12 L26 50 Q26 54 28 54 L30 54\" \n                  fill=\"none\" stroke=\"#A5D6A7\" strokeWidth=\"2\" strokeOpacity=\"0.6\"/>\n            {/* Label */}\n            <rect x=\"22\" y=\"30\" width=\"20\" height=\"18\" rx=\"2\" \n                  fill=\"#FFFFFF\" fillOpacity=\"0.7\" stroke=\"#CCC\" strokeWidth=\"1\"/>\n            {/* Glass recycling symbol */}\n            <circle cx=\"32\" cy=\"39\" r=\"5\" fill=\"none\" stroke=\"#2E7D32\" strokeWidth=\"2\"/>\n            <text x=\"32\" y=\"42\" textAnchor=\"middle\" fill=\"#2E7D32\" fontSize=\"8\" fontWeight=\"bold\">G</text>\n          </svg>\n        </div>\n      );\n\n    case 'paper':\n      return (\n        <div className={`${iconSize} relative flex items-center justify-center`}>\n          {/* Paper/cardboard stack with high detail */}\n          <svg viewBox=\"0 0 64 64\" className=\"w-full h-full drop-shadow-lg\">\n            {/* Back paper sheet */}\n            <rect x=\"14\" y=\"12\" width=\"32\" height=\"42\" rx=\"2\" \n                  fill=\"#1976D2\" stroke=\"#0D47A1\" strokeWidth=\"2\" transform=\"rotate(2 30 33)\"/>\n            {/* Middle paper sheet */}\n            <rect x=\"12\" y=\"10\" width=\"32\" height=\"42\" rx=\"2\" \n                  fill=\"#2196F3\" stroke=\"#1565C0\" strokeWidth=\"2\" transform=\"rotate(-1 28 31)\"/>\n            {/* Front paper sheet */}\n            <rect x=\"16\" y=\"8\" width=\"32\" height=\"42\" rx=\"2\" \n                  fill=\"#42A5F5\" stroke=\"#1976D2\" strokeWidth=\"2\"/>\n            {/* Paper lines */}\n            <line x1=\"20\" y1=\"16\" x2=\"44\" y2=\"16\" stroke=\"#FFFFFF\" strokeWidth=\"1\" strokeOpacity=\"0.6\"/>\n            <line x1=\"20\" y1=\"22\" x2=\"44\" y2=\"22\" stroke=\"#FFFFFF\" strokeWidth=\"1\" strokeOpacity=\"0.6\"/>\n            <line x1=\"20\" y1=\"28\" x2=\"44\" y2=\"28\" stroke=\"#FFFFFF\" strokeWidth=\"1\" strokeOpacity=\"0.6\"/>\n            <line x1=\"20\" y1=\"34\" x2=\"44\" y2=\"34\" stroke=\"#FFFFFF\" strokeWidth=\"1\" strokeOpacity=\"0.6\"/>\n            <line x1=\"20\" y1=\"40\" x2=\"44\" y2=\"40\" stroke=\"#FFFFFF\" strokeWidth=\"1\" strokeOpacity=\"0.6\"/>\n            {/* Recycling symbol */}\n            <circle cx=\"40\" cy=\"44\" r=\"4\" fill=\"#FFFFFF\" fillOpacity=\"0.9\"/>\n            <path d=\"M38 42 L40 40 L42 42 M38 46 L40 44 L42 46\" \n                  stroke=\"#1976D2\" strokeWidth=\"1.5\" fill=\"none\" strokeLinecap=\"round\"/>\n            {/* Paper corner fold */}\n            <path d=\"M40 8 L48 16 L40 16 Z\" fill=\"#1565C0\" stroke=\"#0D47A1\" strokeWidth=\"1\"/>\n          </svg>\n        </div>\n      );\n\n    case 'organic':\n      return (\n        <div className={`${iconSize} relative flex items-center justify-center`}>\n          {/* Organic waste with high detail */}\n          <svg viewBox=\"0 0 64 64\" className=\"w-full h-full drop-shadow-lg\">\n            {/* Apple core */}\n            <ellipse cx=\"28\" cy=\"32\" rx=\"8\" ry=\"12\" \n                     fill=\"#8D6E63\" stroke=\"#5D4037\" strokeWidth=\"2\"/>\n            {/* Apple stem */}\n            <rect x=\"26\" y=\"18\" width=\"4\" height=\"6\" \n                  fill=\"#4E342E\" stroke=\"#3E2723\" strokeWidth=\"1\"/>\n            {/* Apple leaf */}\n            <ellipse cx=\"32\" cy=\"20\" rx=\"3\" ry=\"6\" \n                     fill=\"#4CAF50\" stroke=\"#2E7D32\" strokeWidth=\"1\" transform=\"rotate(25 32 20)\"/>\n            {/* Banana peel */}\n            <path d=\"M40 28 Q36 24 38 20 Q42 22 46 28 Q48 32 44 36 Q40 32 40 28 Z\" \n                  fill=\"#FDD835\" stroke=\"#F57F17\" strokeWidth=\"2\"/>\n            {/* Banana spots */}\n            <circle cx=\"42\" cy=\"26\" r=\"1.5\" fill=\"#F57F17\"/>\n            <circle cx=\"44\" cy=\"30\" r=\"1\" fill=\"#F57F17\"/>\n            {/* Orange peel slice */}\n            <path d=\"M18 40 Q14 36 16 32 Q20 34 24 40 Q26 44 22 48 Q18 44 18 40 Z\" \n                  fill=\"#FF9800\" stroke=\"#E65100\" strokeWidth=\"2\"/>\n            {/* Coffee grounds */}\n            <circle cx=\"45\" cy=\"45\" r=\"6\" fill=\"#3E2723\" stroke=\"#1B0000\" strokeWidth=\"2\"/>\n            <circle cx=\"43\" cy=\"43\" r=\"1\" fill=\"#5D4037\"/>\n            <circle cx=\"47\" cy=\"44\" r=\"0.8\" fill=\"#5D4037\"/>\n            <circle cx=\"46\" cy=\"47\" r=\"1.2\" fill=\"#5D4037\"/>\n            {/* Compost symbol */}\n            <circle cx=\"32\" cy=\"48\" r=\"6\" fill=\"#4CAF50\" fillOpacity=\"0.8\" stroke=\"#2E7D32\" strokeWidth=\"2\"/>\n            <path d=\"M30 46 Q32 44 34 46 Q32 48 30 46\" fill=\"#FFFFFF\"/>\n            <circle cx=\"32\" cy=\"50\" r=\"1\" fill=\"#FFFFFF\"/>\n          </svg>\n        </div>\n      );\n\n    default:\n      return null;\n  }\n}\n\ninterface WastePreviewPanelProps {\n  isVisible: boolean;\n  nextWasteType: TrashType | null;\n  distanceToContainers: number;\n}\n\nexport default function WastePreviewPanel({ \n  isVisible, \n  nextWasteType, \n  distanceToContainers \n}: WastePreviewPanelProps) {\n  const [shouldShow, setShouldShow] = useState(false);\n\n  // Smooth transition logic\n  useEffect(() => {\n    if (isVisible && nextWasteType) {\n      setShouldShow(true);\n    } else {\n      // Delay hide to allow smooth animation\n      const timeout = setTimeout(() => setShouldShow(false), 300);\n      return () => clearTimeout(timeout);\n    }\n  }, [isVisible, nextWasteType]);\n\n  if (!shouldShow || !nextWasteType) {\n    return null;\n  }\n\n  const wasteTypeNames = {\n    plastic: 'Plástico',\n    glass: 'Vidrio', \n    paper: 'Papel',\n    organic: 'Orgánico'\n  };\n\n  const wasteColors = {\n    plastic: 'border-yellow-400 bg-yellow-50',\n    glass: 'border-green-400 bg-green-50',\n    paper: 'border-blue-400 bg-blue-50', \n    organic: 'border-amber-600 bg-amber-50'\n  };\n\n  const containerInstructions = {\n    plastic: 'Cubo Amarillo (Carril Derecho)',\n    glass: 'Cubo Verde (Carril Izquierdo)',\n    paper: 'Cubo Azul (Carril Central Derecho)',\n    organic: 'Cubo Marrón (Carril Central Izquierdo)'\n  };\n\n  return (\n    <div \n      className={`fixed right-4 top-1/2 transform -translate-y-1/2 z-20 transition-all duration-500 ease-in-out ${\n        isVisible ? 'opacity-100 translate-x-0' : 'opacity-0 translate-x-8'\n      }`}\n    >\n      {/* Main panel */}\n      <div className={`\n        ${wasteColors[nextWasteType]}\n        border-2 rounded-lg shadow-2xl p-6 max-w-sm\n        backdrop-blur-sm bg-opacity-95\n      `}>\n        {/* Header */}\n        <div className=\"text-center mb-4\">\n          <div className=\"text-lg font-bold text-gray-800 mb-1\">\n            🗂️ Próximo Residuo\n          </div>\n          <div className=\"text-sm text-gray-600\">\n            Contenedores en {Math.round(distanceToContainers)}m\n          </div>\n        </div>\n\n        {/* Waste icon */}\n        <div className=\"flex justify-center mb-4 p-4 bg-white bg-opacity-50 rounded-lg\">\n          <WasteItemIcon type={nextWasteType} size=\"large\" />\n        </div>\n\n        {/* Waste type name */}\n        <div className=\"text-center mb-3\">\n          <div className=\"text-xl font-bold text-gray-800 mb-1\">\n            {wasteTypeNames[nextWasteType]}\n          </div>\n          <div className=\"text-sm text-gray-600\">\n            {containerInstructions[nextWasteType]}\n          </div>\n        </div>\n\n        {/* Action instruction */}\n        <div className=\"bg-white bg-opacity-60 rounded-lg p-3 text-center\">\n          <div className=\"text-sm font-semibold text-gray-800 mb-1\">\n            📍 ¡Prepárate!\n          </div>\n          <div className=\"text-xs text-gray-600\">\n            Usa ← → para posicionarte<br/>\n            ESPACIO para saltar y clasificar\n          </div>\n        </div>\n\n        {/* Distance indicator */}\n        <div className=\"mt-3 bg-gray-200 rounded-full h-2\">\n          <div \n            className=\"bg-gradient-to-r from-red-400 to-green-400 h-2 rounded-full transition-all duration-300\"\n            style={{ \n              width: `${Math.max(0, 100 - (distanceToContainers / 40 * 100))}%` \n            }}\n          ></div>\n        </div>\n      </div>\n\n      {/* Animated arrow pointing to containers */}\n      <div className=\"absolute -left-8 top-1/2 transform -translate-y-1/2\">\n        <div className=\"animate-pulse\">\n          <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" className=\"text-gray-600\">\n            <path \n              d=\"M4 12l1.41-1.41L11 16.17V4h2v12.17l5.59-5.58L20 12l-8 8-8-8z\" \n              fill=\"currentColor\"\n              transform=\"rotate(-90 12 12)\"\n            />\n          </svg>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":11086},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1148},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":473},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4419},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-1.5 w-full grow overflow-hidden rounded-full bg-primary/20\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-4 w-4 rounded-full border border-primary/50 bg-background shadow transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1037},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on port 5000\n  // this serves both the API and the client\n  const port = 5000;\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":1871},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\n      \"p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]\",\n      className\n    )}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2859},"client/src/lib/stores/useAudio.tsx":{"content":"import { create } from \"zustand\";\n\ninterface AudioState {\n  backgroundMusic: HTMLAudioElement | null;\n  hitSound: HTMLAudioElement | null;\n  successSound: HTMLAudioElement | null;\n  isMuted: boolean;\n  \n  // Setter functions\n  setBackgroundMusic: (music: HTMLAudioElement) => void;\n  setHitSound: (sound: HTMLAudioElement) => void;\n  setSuccessSound: (sound: HTMLAudioElement) => void;\n  \n  // Control functions\n  toggleMute: () => void;\n  playHit: () => void;\n  playSuccess: () => void;\n}\n\nexport const useAudio = create<AudioState>((set, get) => ({\n  backgroundMusic: null,\n  hitSound: null,\n  successSound: null,\n  isMuted: true, // Start muted by default\n  \n  setBackgroundMusic: (music) => set({ backgroundMusic: music }),\n  setHitSound: (sound) => set({ hitSound: sound }),\n  setSuccessSound: (sound) => set({ successSound: sound }),\n  \n  toggleMute: () => {\n    const { isMuted } = get();\n    const newMutedState = !isMuted;\n    \n    // Just update the muted state\n    set({ isMuted: newMutedState });\n    \n    // Log the change\n    console.log(`Sound ${newMutedState ? 'muted' : 'unmuted'}`);\n  },\n  \n  playHit: () => {\n    const { hitSound, isMuted } = get();\n    if (hitSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Hit sound skipped (muted)\");\n        return;\n      }\n      \n      // Clone the sound to allow overlapping playback\n      const soundClone = hitSound.cloneNode() as HTMLAudioElement;\n      soundClone.volume = 0.3;\n      soundClone.play().catch(error => {\n        console.log(\"Hit sound play prevented:\", error);\n      });\n    }\n  },\n  \n  playSuccess: () => {\n    const { successSound, isMuted } = get();\n    if (successSound) {\n      // If sound is muted, don't play anything\n      if (isMuted) {\n        console.log(\"Success sound skipped (muted)\");\n        return;\n      }\n      \n      successSound.currentTime = 0;\n      successSound.play().catch(error => {\n        console.log(\"Success sound play prevented:\", error);\n      });\n    }\n  }\n}));\n","size_bytes":2025},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverAnchor = PopoverPrimitive.Anchor\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }\n","size_bytes":1292},"client/src/components/TrashObstacle.tsx":{"content":"import { useRef, useMemo } from \"react\";\nimport { useFrame } from \"@react-three/fiber\";\nimport { Mesh } from \"three\";\nimport * as THREE from \"three\";\nimport { useRecyclingGame } from \"../lib/stores/useRecyclingGame\";\nimport { TrashObstacle as TrashObstacleType } from \"../types/game\";\nimport { useGameThemes } from \"../lib/stores/useGameThemes\";\n\ninterface Props {\n  obstacle: TrashObstacleType;\n}\n\nexport default function TrashObstacle({ obstacle }: Props) {\n  const meshRef = useRef<Mesh>(null);\n  const { gameSpeed, removeObstacle } = useRecyclingGame();\n  const { getCurrentTheme } = useGameThemes();\n  const theme = getCurrentTheme();\n\n  // Pre-calculate colors and shapes based on trash type and theme\n  const { color, geometry, renderType } = useMemo(() => {\n    const trashStyle = theme.trashStyle;\n    \n    if (trashStyle === 'pumpkin') {\n      const pumpkinColors = ['#FF6600', '#FF8C00', '#FFA500', '#FF4500'];\n      const colorIndex = obstacle.id % pumpkinColors.length;\n      return { \n        color: pumpkinColors[colorIndex], \n        geometry: [0.5, 0.5, 0.5] as [number, number, number],\n        renderType: 'pumpkin' as const\n      };\n    }\n    \n    if (trashStyle === 'gift') {\n      const giftColors = ['#FF1744', '#00E676', '#2979FF', '#FFD600', '#E040FB'];\n      const colorIndex = obstacle.id % giftColors.length;\n      return { \n        color: giftColors[colorIndex], \n        geometry: [0.5, 0.5, 0.5] as [number, number, number],\n        renderType: 'gift' as const\n      };\n    }\n    \n    // Normal trash items\n    switch (obstacle.trashType) {\n      case 'plastic':\n        return { color: '#F8E71C', geometry: [0.3, 0.8, 0.3] as [number, number, number], renderType: 'normal' as const };\n      case 'glass':\n        return { color: '#4CAF50', geometry: [0.25, 0.9, 0.25] as [number, number, number], renderType: 'normal' as const };\n      case 'organic':\n        return { color: '#8D6E63', geometry: [0.4, 0.2, 0.6] as [number, number, number], renderType: 'normal' as const };\n      case 'paper':\n        return { color: '#2196F3', geometry: [0.5, 0.1, 0.7] as [number, number, number], renderType: 'normal' as const };\n      default:\n        return { color: '#666666', geometry: [0.4, 0.4, 0.4] as [number, number, number], renderType: 'normal' as const };\n    }\n  }, [obstacle.trashType, obstacle.id, theme.trashStyle]);\n\n  useFrame(() => {\n    if (meshRef.current) {\n      meshRef.current.position.set(\n        obstacle.position.x,\n        obstacle.position.y,\n        obstacle.position.z\n      );\n    }\n  });\n\n  if (renderType === 'pumpkin') {\n    return (\n      <group position={[obstacle.position.x, obstacle.position.y, obstacle.position.z]}>\n        <mesh castShadow ref={meshRef}>\n          <sphereGeometry args={[geometry[0], 8, 6]} />\n          <meshLambertMaterial color={color} />\n        </mesh>\n        <mesh position={[0, geometry[1] * 0.8, 0]} castShadow>\n          <cylinderGeometry args={[0.08, 0.08, 0.15, 6]} />\n          <meshLambertMaterial color=\"#2E7D32\" />\n        </mesh>\n      </group>\n    );\n  }\n\n  if (renderType === 'gift') {\n    return (\n      <group position={[obstacle.position.x, obstacle.position.y, obstacle.position.z]}>\n        <mesh castShadow ref={meshRef}>\n          <boxGeometry args={geometry} />\n          <meshLambertMaterial color={color} />\n        </mesh>\n        <mesh position={[0, geometry[1] * 0.51, 0]} castShadow>\n          <boxGeometry args={[geometry[0] * 1.1, 0.08, geometry[2] * 0.2]} />\n          <meshLambertMaterial color=\"#FFD700\" />\n        </mesh>\n        <mesh position={[0, geometry[1] * 0.51, 0]} castShadow>\n          <boxGeometry args={[geometry[0] * 0.2, 0.08, geometry[2] * 1.1]} />\n          <meshLambertMaterial color=\"#FFD700\" />\n        </mesh>\n      </group>\n    );\n  }\n\n  return (\n    <mesh \n      ref={meshRef} \n      position={[obstacle.position.x, obstacle.position.y, obstacle.position.z]}\n      castShadow\n    >\n      <boxGeometry args={geometry} />\n      <meshLambertMaterial color={color} />\n    </mesh>\n  );\n}\n","size_bytes":4026},"client/src/types/game.ts":{"content":"export type GameState = 'menu' | 'tutorial' | 'playing' | 'gameOver' | 'paused';\n\nexport type TrashType = 'plastic' | 'glass' | 'organic' | 'paper';\n\nexport interface Vector3 {\n  x: number;\n  y: number;\n  z: number;\n}\n\nexport interface TrashObstacle {\n  id: number;\n  trashType: TrashType;\n  position: Vector3;\n  lane: number; // 0 = left, 1 = center, 2 = right\n}\n\nexport interface RecyclingBin {\n  type: TrashType;\n  position: Vector3;\n  color: string;\n}\n\nexport interface TutorialStep {\n  id: string;\n  title: string;\n  description: string;\n  instruction: string;\n  targetAction?: 'move-left' | 'move-right' | 'jump' | 'classify-correct' | 'avoid-obstacle';\n  completionMessage?: string;\n  highlightElement?: string;\n}\n","size_bytes":721},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-[0.8rem] text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-[0.8rem] font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4132},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Portal>\n    <TooltipPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </TooltipPrimitive.Portal>\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1217},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\";\nimport { Slot } from \"@radix-ui/react-slot\";\nimport { VariantProps, cva } from \"class-variance-authority\";\nimport { PanelLeft } from \"lucide-react\";\n\nimport { useIsMobile } from \"@/hooks/use-is-mobile\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\";\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\";\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;\nconst SIDEBAR_WIDTH = \"16rem\";\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\";\nconst SIDEBAR_WIDTH_ICON = \"3rem\";\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\";\n\ntype SidebarContext = {\n  state: \"expanded\" | \"collapsed\";\n  open: boolean;\n  setOpen: (open: boolean) => void;\n  openMobile: boolean;\n  setOpenMobile: (open: boolean) => void;\n  isMobile: boolean;\n  toggleSidebar: () => void;\n};\n\nconst SidebarContext = React.createContext<SidebarContext | null>(null);\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext);\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\");\n  }\n\n  return context;\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const isMobile = useIsMobile();\n    const [openMobile, setOpenMobile] = React.useState(false);\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen);\n    const open = openProp ?? _open;\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value;\n        if (setOpenProp) {\n          setOpenProp(openState);\n        } else {\n          _setOpen(openState);\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;\n      },\n      [setOpenProp, open],\n    );\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open);\n    }, [isMobile, setOpen, setOpenMobile]);\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault();\n          toggleSidebar();\n        }\n      };\n\n      window.addEventListener(\"keydown\", handleKeyDown);\n      return () => window.removeEventListener(\"keydown\", handleKeyDown);\n    }, [toggleSidebar]);\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\";\n\n    const contextValue = React.useMemo<SidebarContext>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      ],\n    );\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className,\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    );\n  },\n);\nSidebarProvider.displayName = \"SidebarProvider\";\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\";\n    variant?: \"sidebar\" | \"floating\" | \"inset\";\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\";\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref,\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar();\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className,\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      );\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      );\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\",\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className,\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  },\n);\nSidebar.displayName = \"Sidebar\";\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event);\n        toggleSidebar();\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  );\n});\nSidebarTrigger.displayName = \"SidebarTrigger\";\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar();\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarRail.displayName = \"SidebarRail\";\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInset.displayName = \"SidebarInset\";\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarInput.displayName = \"SidebarInput\";\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarHeader.displayName = \"SidebarHeader\";\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarFooter.displayName = \"SidebarFooter\";\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  );\n});\nSidebarSeparator.displayName = \"SidebarSeparator\";\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarContent.displayName = \"SidebarContent\";\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  );\n});\nSidebarGroup.displayName = \"SidebarGroup\";\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\";\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarGroupAction.displayName = \"SidebarGroupAction\";\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n));\nSidebarGroupContent.displayName = \"SidebarGroupContent\";\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n));\nSidebarMenu.displayName = \"SidebarMenu\";\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n));\nSidebarMenuItem.displayName = \"SidebarMenuItem\";\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n);\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    isActive?: boolean;\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>;\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n    const { isMobile, state } = useSidebar();\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    );\n\n    if (!tooltip) {\n      return button;\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      };\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    );\n  },\n);\nSidebarMenuButton.displayName = \"SidebarMenuButton\";\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean;\n    showOnHover?: boolean;\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuAction.displayName = \"SidebarMenuAction\";\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\";\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean;\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`;\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  );\n});\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\";\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className,\n    )}\n    {...props}\n  />\n));\nSidebarMenuSub.displayName = \"SidebarMenuSub\";\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />);\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\";\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean;\n    size?: \"sm\" | \"md\";\n    isActive?: boolean;\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\";\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className,\n      )}\n      {...props}\n    />\n  );\n});\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\";\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n};\n","size_bytes":23790},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationLink,\n  PaginationItem,\n  PaginationPrevious,\n  PaginationNext,\n  PaginationEllipsis,\n}\n","size_bytes":2751},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1877},"client/src/components/PauseButton.tsx":{"content":"import { useRecyclingGame } from '../lib/stores/useRecyclingGame';\n\nexport default function PauseButton() {\n  const { gameState, togglePause } = useRecyclingGame();\n\n  // Only show pause button during active gameplay or when paused\n  if (gameState !== 'playing' && gameState !== 'paused' && gameState !== 'tutorial') {\n    return null;\n  }\n\n  const isPaused = gameState === 'paused';\n\n  return (\n    <>\n      {/* Pause button on the left side */}\n      <button\n        onClick={togglePause}\n        className=\"fixed left-10 bottom-20 bg-blue-500 hover:bg-blue-600 text-white font-bold py-3 px-4 rounded-lg shadow-lg z-40 transition-all\"\n      >\n        <div className=\"flex items-center gap-2\">\n          <span className=\"text-2xl\">{isPaused ? '▶️' : '⏸️'}</span>\n          <span className=\"text-sm\">{isPaused ? 'REANUDAR' : 'PAUSA'}</span>\n        </div>\n      </button>\n\n      {/* Pause overlay */}\n      {isPaused && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-40\">\n          <div className=\"bg-white rounded-lg p-8 text-center shadow-2xl max-w-md\">\n            <h2 className=\"text-3xl font-bold text-blue-600 mb-4\">⏸️ JUEGO PAUSADO</h2>\n            <p className=\"text-lg text-gray-700 mb-6\">\n              El juego está en pausa. Haz clic en \"Reanudar\" para continuar jugando\n            </p>\n            <button\n              onClick={togglePause}\n              className=\"bg-green-500 hover:bg-green-600 text-white font-bold py-3 px-8 rounded-lg text-xl w-full transition-all\"\n            >\n              ▶️ Reanudar Juego\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":1678},"client/src/components/Shop.tsx":{"content":"import { useState } from 'react';\nimport { useRecyclingGame } from '../lib/stores/useRecyclingGame';\nimport { usePlayerSkins, AVAILABLE_SKINS } from '../lib/stores/usePlayerSkins';\nimport { usePromoCodes } from '../lib/stores/usePromoCodes';\nimport { useGameThemes, AVAILABLE_THEMES } from '../lib/stores/useGameThemes';\nimport { usePowerUps, AVAILABLE_POWERUPS } from '../lib/stores/usePowerUps';\n\nexport default function Shop() {\n  const [isOpen, setIsOpen] = useState(false);\n  const { coins, setCoins, lives } = useRecyclingGame();\n  const { purchaseSkin, selectSkin, getCurrentSkin, isPurchased } = usePlayerSkins();\n  const { redeemCode } = usePromoCodes();\n  const { purchaseTheme, selectTheme, getCurrentTheme, isPurchased: isThemePurchased } = useGameThemes();\n  const { activatePowerUp } = usePowerUps();\n  const currentSkin = getCurrentSkin();\n  const currentTheme = getCurrentTheme();\n  \n  const [promoCode, setPromoCode] = useState('');\n  const [promoMessage, setPromoMessage] = useState<{ text: string; type: 'success' | 'error' } | null>(null);\n\n  const handlePurchase = (skinId: string) => {\n    const result = purchaseSkin(skinId, coins);\n    if (result.success) {\n      // Update coins in the game store\n      setCoins(result.newCoins);\n      \n      // Auto-select the purchased skin\n      selectSkin(skinId);\n    }\n  };\n\n  const handleRedeemCode = () => {\n    if (!promoCode.trim()) {\n      setPromoMessage({ text: 'Por favor ingresa un código', type: 'error' });\n      setTimeout(() => setPromoMessage(null), 3000);\n      return;\n    }\n\n    const result = redeemCode(promoCode);\n    \n    if (result.success) {\n      setCoins(coins + result.coins);\n      setPromoMessage({ text: result.message, type: 'success' });\n      setPromoCode('');\n    } else {\n      setPromoMessage({ text: result.message, type: 'error' });\n    }\n    \n    setTimeout(() => setPromoMessage(null), 3000);\n  };\n\n  const handlePurchaseTheme = (themeId: string) => {\n    const result = purchaseTheme(themeId, coins);\n    if (result.success) {\n      setCoins(result.newCoins);\n      selectTheme(themeId);\n    }\n  };\n\n  const handlePurchasePowerUp = (powerUpId: string) => {\n    const powerUp = AVAILABLE_POWERUPS.find(p => p.id === powerUpId);\n    if (!powerUp) return;\n\n    if (coins < powerUp.price) return;\n\n    setCoins(coins - powerUp.price);\n    \n    if (powerUp.type === 'coin_multiplier') {\n      activatePowerUp(powerUpId);\n    } else if (powerUp.type === 'lives') {\n      useRecyclingGame.getState().addLife();\n    }\n  };\n\n  return (\n    <>\n      {/* Shop button on the right edge */}\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"fixed right-0 top-1/2 transform -translate-y-1/2 bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-6 px-3 rounded-l-lg shadow-lg z-30 transition-all\"\n        style={{ borderRadius: '8px 0 0 8px' }}\n      >\n        <div className=\"flex flex-col items-center\">\n          <span className=\"text-2xl mb-1\">🛒</span>\n          <span className=\"text-xs\">TIENDA</span>\n        </div>\n      </button>\n\n      {/* Shop panel */}\n      {isOpen && (\n        <div className=\"fixed right-0 top-0 h-full w-96 bg-white shadow-2xl z-40 transform transition-transform duration-300 ease-in-out overflow-y-auto\">\n          {/* Header with coins */}\n          <div className=\"bg-gradient-to-r from-yellow-400 to-yellow-600 p-4 sticky top-0 z-10\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <h2 className=\"text-2xl font-bold text-white\">🛒 Tienda</h2>\n              <button\n                onClick={() => setIsOpen(false)}\n                className=\"text-white hover:text-gray-200 text-2xl font-bold\"\n              >\n                ✕\n              </button>\n            </div>\n            <div className=\"bg-white bg-opacity-20 rounded-lg p-3 text-center\">\n              <p className=\"text-white text-lg font-semibold\">💰 Tus Monedas</p>\n              <p className=\"text-3xl font-bold text-white\">{coins}</p>\n            </div>\n          </div>\n\n          {/* Promo Codes Section */}\n          <div className=\"p-4 border-b-4 border-yellow-200 bg-gradient-to-br from-purple-50 to-pink-50\">\n            <h3 className=\"text-lg font-bold text-gray-800 mb-3 flex items-center gap-2\">\n              🎁 Códigos Promocionales\n            </h3>\n            <div className=\"space-y-2\">\n              <input\n                type=\"text\"\n                value={promoCode}\n                onChange={(e) => setPromoCode(e.target.value.toUpperCase())}\n                placeholder=\"Ingresa tu código de 24 dígitos\"\n                className=\"w-full px-3 py-2 border-2 border-purple-300 rounded-lg focus:outline-none focus:border-purple-500 text-center font-mono text-sm\"\n                maxLength={24}\n              />\n              <button\n                onClick={handleRedeemCode}\n                className=\"w-full bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white font-bold py-2 px-4 rounded-lg transition-all\"\n              >\n                🎉 Canjear Código\n              </button>\n              {promoMessage && (\n                <div className={`p-2 rounded-lg text-center font-semibold text-sm ${\n                  promoMessage.type === 'success' \n                    ? 'bg-green-100 text-green-800 border-2 border-green-300' \n                    : 'bg-red-100 text-red-800 border-2 border-red-300'\n                }`}>\n                  {promoMessage.text}\n                </div>\n              )}\n            </div>\n          </div>\n\n          {/* Skins grid */}\n          <div className=\"p-4 space-y-3\">\n            {AVAILABLE_SKINS.map((skin) => {\n              const purchased = isPurchased(skin.id);\n              const isCurrentSkin = currentSkin.id === skin.id;\n              const canAfford = coins >= skin.price;\n\n              return (\n                <div\n                  key={skin.id}\n                  className={`border-2 rounded-lg p-3 transition-all ${\n                    isCurrentSkin \n                      ? 'border-green-500 bg-green-50' \n                      : purchased \n                      ? 'border-blue-300 bg-blue-50' \n                      : 'border-gray-200 bg-white'\n                  }`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <div className=\"flex-1\">\n                      <h3 className=\"font-bold text-gray-800\">{skin.name}</h3>\n                      <div className=\"flex gap-1 mt-1\">\n                        <div \n                          className=\"w-4 h-4 rounded-full border border-gray-300\" \n                          style={{ backgroundColor: skin.colors.body }}\n                        />\n                        <div \n                          className=\"w-4 h-4 rounded-full border border-gray-300\" \n                          style={{ backgroundColor: skin.colors.legs }}\n                        />\n                        <div \n                          className=\"w-4 h-4 rounded-full border border-gray-300\" \n                          style={{ backgroundColor: skin.colors.hair }}\n                        />\n                        {skin.hasHat && (\n                          <span className=\"text-sm ml-1\">🧢</span>\n                        )}\n                      </div>\n                    </div>\n                    <div className=\"text-right\">\n                      {skin.price === 0 ? (\n                        <span className=\"text-green-600 font-bold text-sm\">GRATIS</span>\n                      ) : (\n                        <span className=\"text-yellow-600 font-bold\">{skin.price} 💰</span>\n                      )}\n                    </div>\n                  </div>\n\n                  <div className=\"flex gap-2\">\n                    {!purchased ? (\n                      <button\n                        onClick={() => handlePurchase(skin.id)}\n                        disabled={!canAfford}\n                        className={`flex-1 py-2 px-4 rounded font-semibold text-sm transition-all ${\n                          canAfford\n                            ? 'bg-green-500 hover:bg-green-600 text-white'\n                            : 'bg-gray-300 text-gray-500 cursor-not-allowed'\n                        }`}\n                      >\n                        {canAfford ? '💳 Comprar' : '🔒 Bloqueado'}\n                      </button>\n                    ) : isCurrentSkin ? (\n                      <button\n                        disabled\n                        className=\"flex-1 py-2 px-4 rounded font-semibold text-sm bg-green-500 text-white\"\n                      >\n                        ✓ Equipado\n                      </button>\n                    ) : (\n                      <button\n                        onClick={() => selectSkin(skin.id)}\n                        className=\"flex-1 py-2 px-4 rounded font-semibold text-sm bg-blue-500 hover:bg-blue-600 text-white transition-all\"\n                      >\n                        👕 Equipar\n                      </button>\n                    )}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":9230},"client/src/lib/stores/usePlayerSkins.tsx":{"content":"import { create } from 'zustand';\n\nexport interface PlayerSkin {\n  id: string;\n  name: string;\n  price: number;\n  colors: {\n    head: string;\n    body: string;\n    arms: string;\n    legs: string;\n    hair: string;\n    eyes: string;\n  };\n  hasHat?: boolean;\n  hatColor?: string;\n}\n\nexport const AVAILABLE_SKINS: PlayerSkin[] = [\n  {\n    id: 'default',\n    name: 'Clásico',\n    price: 0,\n    colors: {\n      head: '#FFD8B5',\n      body: '#FF6B6B',\n      arms: '#FFD8B5',\n      legs: '#4ECDC4',\n      hair: '#8B4513',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'red',\n    name: 'Rojo Fuego',\n    price: 1500,\n    colors: {\n      head: '#FFD8B5',\n      body: '#DC143C',\n      arms: '#FFD8B5',\n      legs: '#8B0000',\n      hair: '#000000',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'blue',\n    name: 'Azul Océano',\n    price: 1800,\n    colors: {\n      head: '#FFD8B5',\n      body: '#1E90FF',\n      arms: '#FFD8B5',\n      legs: '#00008B',\n      hair: '#4169E1',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'green',\n    name: 'Verde Bosque',\n    price: 2000,\n    colors: {\n      head: '#FFD8B5',\n      body: '#32CD32',\n      arms: '#FFD8B5',\n      legs: '#006400',\n      hair: '#228B22',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'purple',\n    name: 'Morado Místico',\n    price: 2500,\n    colors: {\n      head: '#FFD8B5',\n      body: '#9370DB',\n      arms: '#FFD8B5',\n      legs: '#4B0082',\n      hair: '#8A2BE2',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'pink',\n    name: 'Rosa Pastel',\n    price: 3000,\n    colors: {\n      head: '#FFD8B5',\n      body: '#FF69B4',\n      arms: '#FFD8B5',\n      legs: '#FF1493',\n      hair: '#FFB6C1',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'summer',\n    name: 'Modo Verano',\n    price: 2200,\n    colors: {\n      head: '#D2691E',\n      body: '#FFD700',\n      arms: '#D2691E',\n      legs: '#FF8C00',\n      hair: '#FFA500',\n      eyes: '#000000'\n    }\n  },\n  {\n    id: 'christmas',\n    name: 'Papá Noel',\n    price: 2800,\n    colors: {\n      head: '#FFD8B5',\n      body: '#DC143C',\n      arms: '#FFD8B5',\n      legs: '#DC143C',\n      hair: '#FFFFFF',\n      eyes: '#000000'\n    },\n    hasHat: true,\n    hatColor: '#DC143C'\n  },\n  {\n    id: 'halloween',\n    name: 'Halloween',\n    price: 2500,\n    colors: {\n      head: '#FFD8B5',\n      body: '#FF8C00',\n      arms: '#FFD8B5',\n      legs: '#000000',\n      hair: '#4B0082',\n      eyes: '#FF0000'\n    }\n  },\n  {\n    id: 'golden',\n    name: 'Dorado Premium',\n    price: 5000,\n    colors: {\n      head: '#FFD700',\n      body: '#FFD700',\n      arms: '#FFD700',\n      legs: '#000000',\n      hair: '#000000',\n      eyes: '#000000'\n    },\n    hasHat: true,\n    hatColor: '#000000'\n  }\n];\n\nconst SKINS_STORAGE_KEY = 'ecorunner_purchased_skins';\nconst CURRENT_SKIN_STORAGE_KEY = 'ecorunner_current_skin';\n\nfunction loadPurchasedSkins(): string[] {\n  try {\n    const saved = localStorage.getItem(SKINS_STORAGE_KEY);\n    return saved ? JSON.parse(saved) : ['default'];\n  } catch (error) {\n    console.warn('Failed to load purchased skins:', error);\n    return ['default'];\n  }\n}\n\nfunction savePurchasedSkins(skins: string[]) {\n  try {\n    localStorage.setItem(SKINS_STORAGE_KEY, JSON.stringify(skins));\n  } catch (error) {\n    console.warn('Failed to save purchased skins:', error);\n  }\n}\n\nfunction loadCurrentSkin(): string {\n  try {\n    const saved = localStorage.getItem(CURRENT_SKIN_STORAGE_KEY);\n    return saved || 'default';\n  } catch (error) {\n    console.warn('Failed to load current skin:', error);\n    return 'default';\n  }\n}\n\nfunction saveCurrentSkin(skinId: string) {\n  try {\n    localStorage.setItem(CURRENT_SKIN_STORAGE_KEY, skinId);\n  } catch (error) {\n    console.warn('Failed to save current skin:', error);\n  }\n}\n\ninterface PlayerSkinsState {\n  purchasedSkins: string[];\n  currentSkinId: string;\n  purchaseSkin: (skinId: string, currentCoins: number) => { success: boolean; newCoins: number };\n  selectSkin: (skinId: string) => void;\n  getCurrentSkin: () => PlayerSkin;\n  isPurchased: (skinId: string) => boolean;\n}\n\nexport const usePlayerSkins = create<PlayerSkinsState>((set, get) => ({\n  purchasedSkins: loadPurchasedSkins(),\n  currentSkinId: loadCurrentSkin(),\n\n  purchaseSkin: (skinId: string, currentCoins: number) => {\n    const skin = AVAILABLE_SKINS.find(s => s.id === skinId);\n    if (!skin) {\n      return { success: false, newCoins: currentCoins };\n    }\n\n    if (currentCoins < skin.price) {\n      return { success: false, newCoins: currentCoins };\n    }\n\n    const { purchasedSkins } = get();\n    if (purchasedSkins.includes(skinId)) {\n      return { success: false, newCoins: currentCoins };\n    }\n\n    const newPurchasedSkins = [...purchasedSkins, skinId];\n    const newCoins = currentCoins - skin.price;\n\n    set({ purchasedSkins: newPurchasedSkins });\n    savePurchasedSkins(newPurchasedSkins);\n\n    return { success: true, newCoins };\n  },\n\n  selectSkin: (skinId: string) => {\n    const { purchasedSkins } = get();\n    if (purchasedSkins.includes(skinId)) {\n      set({ currentSkinId: skinId });\n      saveCurrentSkin(skinId);\n    }\n  },\n\n  getCurrentSkin: () => {\n    const { currentSkinId } = get();\n    return AVAILABLE_SKINS.find(s => s.id === currentSkinId) || AVAILABLE_SKINS[0];\n  },\n\n  isPurchased: (skinId: string) => {\n    const { purchasedSkins } = get();\n    return purchasedSkins.includes(skinId);\n  }\n}));\n","size_bytes":5340},"client/src/lib/stores/usePromoCodes.tsx":{"content":"import { create } from 'zustand';\n\nexport interface PromoCode {\n  code: string;\n  coins: number;\n  used: boolean;\n}\n\nconst PROMO_CODES_STORAGE_KEY = 'ecorunner_promo_codes';\n\nfunction savePromoCodestoStorage(codes: PromoCode[]) {\n  try {\n    localStorage.setItem(PROMO_CODES_STORAGE_KEY, JSON.stringify(codes));\n  } catch (error) {\n    console.warn('Failed to save promo codes to localStorage:', error);\n  }\n}\n\nfunction loadPromoCodesFromStorage(): PromoCode[] {\n  try {\n    const saved = localStorage.getItem(PROMO_CODES_STORAGE_KEY);\n    if (saved) {\n      const codes = JSON.parse(saved);\n      const allValid = codes.every((code: PromoCode) => code.code.length === 24);\n      if (allValid) {\n        return codes;\n      }\n      console.warn('Stored promo codes have invalid length, resetting to defaults');\n    }\n  } catch (error) {\n    console.warn('Failed to load promo codes from localStorage:', error);\n  }\n  return getDefaultPromoCodes();\n}\n\nfunction getDefaultPromoCodes(): PromoCode[] {\n  return [\n    // Códigos para 10,000 monedas (24 caracteres cada uno)\n    { code: 'CARLASANCHEZLANCHARES009', coins: 10000, used: false },\n    { code: 'RUN10KHJKL23456MNOPQRST0', coins: 10000, used: false },\n    { code: 'TRY10KTUVW89012XYZ345678', coins: 10000, used: false },\n    { code: 'WIN10K7ABCDEFGHIJKLMNOPQ', coins: 10000, used: false },\n    { code: 'PLY10KPQRSTUVW90123XYZAB', coins: 10000, used: false },\n    { code: 'CARLASANCHEZLANCHARES000', coins: 10000, used: false },\n    \n    // Códigos para 20,000 monedas (24 caracteres cada uno)\n    { code: 'ECO20K45678ABCDEFGHIJKLM', coins: 20000, used: false },\n    { code: 'RUN20KLMNOPQRS1234TUVWXY', coins: 20000, used: false },\n    { code: 'TRY20K56789XYZABCDEFGHIJ', coins: 20000, used: false },\n    { code: 'WIN20KIJKLMNOPQRST012345', coins: 20000, used: false },\n    { code: 'PLY20KUVWX456789YZABCDEF', coins: 20000, used: false },\n    \n    // Códigos para 50,000 monedas (24 caracteres cada uno)\n    { code: 'ECO50KMEGA9876XABCZYXWVU', coins: 50000, used: false },\n    { code: 'RUN50KGOLD54321DEFGHIJKL', coins: 50000, used: false },\n    { code: 'TRY50KKINGLMNOPQRS890123', coins: 50000, used: false },\n    { code: 'WIN50KSTARTUVW23456XYZMN', coins: 50000, used: false },\n    { code: 'PLY50KHERO7ABCDEFGHIJKLM', coins: 50000, used: false },\n  ];\n}\n\ninterface PromoCodeState {\n  promoCodes: PromoCode[];\n  redeemCode: (code: string) => { success: boolean; coins: number; message: string };\n}\n\nexport const usePromoCodes = create<PromoCodeState>((set, get) => ({\n  promoCodes: loadPromoCodesFromStorage(),\n\n  redeemCode: (inputCode: string) => {\n    const { promoCodes } = get();\n    const normalizedInput = inputCode.trim().toUpperCase();\n    \n    const codeIndex = promoCodes.findIndex(\n      (pc) => pc.code.toUpperCase() === normalizedInput\n    );\n\n    if (codeIndex === -1) {\n      return {\n        success: false,\n        coins: 0,\n        message: 'Código inválido o no existe'\n      };\n    }\n\n    const promoCode = promoCodes[codeIndex];\n\n    if (promoCode.used) {\n      return {\n        success: false,\n        coins: 0,\n        message: 'Este código ya ha sido utilizado'\n      };\n    }\n\n    const updatedCodes = [...promoCodes];\n    updatedCodes[codeIndex] = { ...promoCode, used: true };\n    \n    set({ promoCodes: updatedCodes });\n    savePromoCodestoStorage(updatedCodes);\n\n    return {\n      success: true,\n      coins: promoCode.coins,\n      message: `¡${promoCode.coins.toLocaleString()} monedas añadidas!`\n    };\n  }\n}));\n","size_bytes":3508},"client/src/lib/stores/usePowerUps.tsx":{"content":"import { create } from 'zustand';\n\nexport interface PowerUp {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n  icon: string;\n  type: 'coin_multiplier' | 'lives';\n  value: number;\n  duration?: number;\n}\n\nexport const AVAILABLE_POWERUPS: PowerUp[] = [\n  {\n    id: 'coin_2x',\n    name: 'Monedas x2',\n    price: 3000,\n    description: 'Duplica las monedas ganadas durante 30 segundos',\n    icon: '💰',\n    type: 'coin_multiplier',\n    value: 2,\n    duration: 30000,\n  },\n  {\n    id: 'coin_5x',\n    name: 'Monedas x5',\n    price: 8000,\n    description: 'Multiplica por 5 las monedas ganadas durante 30 segundos',\n    icon: '💎',\n    type: 'coin_multiplier',\n    value: 5,\n    duration: 30000,\n  },\n  {\n    id: 'extra_life',\n    name: 'Vida Extra',\n    price: 2000,\n    description: 'Añade una vida extra al juego actual',\n    icon: '❤️',\n    type: 'lives',\n    value: 1,\n  },\n];\n\ninterface ActivePowerUp {\n  id: string;\n  endTime: number;\n  value: number;\n}\n\ninterface PowerUpsState {\n  activePowerUps: ActivePowerUp[];\n  activatePowerUp: (powerUpId: string) => void;\n  getCoinMultiplier: () => number;\n  getActivePowerUps: () => PowerUp[];\n  clearExpiredPowerUps: () => void;\n  clearAllPowerUps: () => void;\n}\n\nexport const usePowerUps = create<PowerUpsState>((set, get) => ({\n  activePowerUps: [],\n\n  activatePowerUp: (powerUpId: string) => {\n    const powerUp = AVAILABLE_POWERUPS.find(p => p.id === powerUpId);\n    if (!powerUp || powerUp.type === 'lives') return;\n\n    const endTime = Date.now() + (powerUp.duration || 0);\n    \n    set(state => ({\n      activePowerUps: [\n        ...state.activePowerUps.filter(p => p.id !== powerUpId),\n        { id: powerUpId, endTime, value: powerUp.value }\n      ]\n    }));\n  },\n\n  getCoinMultiplier: () => {\n    get().clearExpiredPowerUps();\n    const multipliers = get().activePowerUps\n      .filter(p => AVAILABLE_POWERUPS.find(pu => pu.id === p.id)?.type === 'coin_multiplier')\n      .map(p => p.value);\n    \n    return multipliers.length > 0 ? Math.max(...multipliers) : 1;\n  },\n\n  getActivePowerUps: () => {\n    get().clearExpiredPowerUps();\n    return get().activePowerUps\n      .map(ap => AVAILABLE_POWERUPS.find(p => p.id === ap.id))\n      .filter(p => p !== undefined) as PowerUp[];\n  },\n\n  clearExpiredPowerUps: () => {\n    const now = Date.now();\n    set(state => ({\n      activePowerUps: state.activePowerUps.filter(p => p.endTime > now)\n    }));\n  },\n\n  clearAllPowerUps: () => {\n    set({ activePowerUps: [] });\n  }\n}));\n","size_bytes":2505},"client/src/lib/stores/useGameThemes.tsx":{"content":"import { create } from 'zustand';\n\nexport interface GameTheme {\n  id: string;\n  name: string;\n  price: number;\n  description: string;\n  lighting: {\n    ambientIntensity: number;\n    ambientColor: string;\n    sunIntensity: number;\n    sunColor: string;\n    fillIntensity: number;\n    fillColor: string;\n  };\n  background: string;\n  trashStyle: 'normal' | 'pumpkin' | 'gift';\n  decorations: 'none' | 'webs' | 'snow';\n}\n\nexport const AVAILABLE_THEMES: GameTheme[] = [\n  {\n    id: 'default',\n    name: 'Normal',\n    price: 0,\n    description: 'El mapa clásico del juego',\n    lighting: {\n      ambientIntensity: 0.4,\n      ambientColor: '#ffffff',\n      sunIntensity: 1,\n      sunColor: '#FFFACD',\n      fillIntensity: 0.3,\n      fillColor: '#87CEEB',\n    },\n    background: 'linear-gradient(to bottom, #87CEEB, #98FB98)',\n    trashStyle: 'normal',\n    decorations: 'none',\n  },\n  {\n    id: 'halloween',\n    name: '🎃 Halloween',\n    price: 5000,\n    description: 'Mapa nocturno de Halloween con calabazas y telarañas',\n    lighting: {\n      ambientIntensity: 0.2,\n      ambientColor: '#9966CC',\n      sunIntensity: 0.3,\n      sunColor: '#FF6600',\n      fillIntensity: 0.4,\n      fillColor: '#9966CC',\n    },\n    background: 'linear-gradient(to bottom, #1a0033, #330066)',\n    trashStyle: 'pumpkin',\n    decorations: 'webs',\n  },\n  {\n    id: 'christmas',\n    name: '🎄 Navidad',\n    price: 7000,\n    description: 'Mapa nevado de Navidad con regalos coloridos',\n    lighting: {\n      ambientIntensity: 0.5,\n      ambientColor: '#E0F7FF',\n      sunIntensity: 0.8,\n      sunColor: '#FFFFFF',\n      fillIntensity: 0.4,\n      fillColor: '#B3E5FC',\n    },\n    background: 'linear-gradient(to bottom, #B3E5FC, #E1F5FE)',\n    trashStyle: 'gift',\n    decorations: 'snow',\n  },\n];\n\nconst THEME_STORAGE_KEY = 'ecorunner_themes';\n\nfunction saveThemesToStorage(purchased: string[], current: string) {\n  try {\n    localStorage.setItem(THEME_STORAGE_KEY, JSON.stringify({ purchased, current }));\n  } catch (error) {\n    console.warn('Failed to save themes to localStorage:', error);\n  }\n}\n\nfunction loadThemesFromStorage(): { purchased: string[]; current: string } {\n  try {\n    const saved = localStorage.getItem(THEME_STORAGE_KEY);\n    if (saved) {\n      return JSON.parse(saved);\n    }\n  } catch (error) {\n    console.warn('Failed to load themes from localStorage:', error);\n  }\n  return { purchased: ['default'], current: 'default' };\n}\n\ninterface GameThemesState {\n  purchasedThemes: string[];\n  currentTheme: string;\n  purchaseTheme: (themeId: string, coins: number) => { success: boolean; newCoins: number };\n  selectTheme: (themeId: string) => void;\n  getCurrentTheme: () => GameTheme;\n  isPurchased: (themeId: string) => boolean;\n}\n\nexport const useGameThemes = create<GameThemesState>((set, get) => {\n  const { purchased, current } = loadThemesFromStorage();\n  \n  return {\n    purchasedThemes: purchased,\n    currentTheme: current,\n\n    purchaseTheme: (themeId: string, coins: number) => {\n      const theme = AVAILABLE_THEMES.find(t => t.id === themeId);\n      if (!theme) {\n        return { success: false, newCoins: coins };\n      }\n\n      if (get().purchasedThemes.includes(themeId)) {\n        return { success: false, newCoins: coins };\n      }\n\n      if (coins < theme.price) {\n        return { success: false, newCoins: coins };\n      }\n\n      const newCoins = coins - theme.price;\n      const newPurchased = [...get().purchasedThemes, themeId];\n      \n      set({ purchasedThemes: newPurchased });\n      saveThemesToStorage(newPurchased, get().currentTheme);\n\n      return { success: true, newCoins };\n    },\n\n    selectTheme: (themeId: string) => {\n      if (!get().purchasedThemes.includes(themeId)) {\n        return;\n      }\n      \n      set({ currentTheme: themeId });\n      saveThemesToStorage(get().purchasedThemes, themeId);\n    },\n\n    getCurrentTheme: () => {\n      const theme = AVAILABLE_THEMES.find(t => t.id === get().currentTheme);\n      return theme || AVAILABLE_THEMES[0];\n    },\n\n    isPurchased: (themeId: string) => {\n      return get().purchasedThemes.includes(themeId);\n    }\n  };\n});\n","size_bytes":4111}},"version":2}